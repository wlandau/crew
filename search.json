[{"path":[]},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement .landau@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://wlandau.github.io/crew/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://wlandau.github.io/crew/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"https://wlandau.github.io/crew/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note crew project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://wlandau.github.io/crew/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/wlandau/crew/discussions, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"https://wlandau.github.io/crew/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/wlandau/crew/issues bug reports, performance issues, maintenance tasks, feature requests. post, please abide following guidelines. posting new issue discussion topic, please take moment search existing similar threads order avoid duplication. bug reports: can, please install latest GitHub version crew (.e. remotes::install_github(\"wlandau/crew\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"https://wlandau.github.io/crew/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea discussion topic issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"https://wlandau.github.io/crew/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wlandau.github.io/crew/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree Contributor Code Conduct. already submitted discussion topic issue discuss idea maintainer.","code":""},{"path":"https://wlandau.github.io/crew/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"https://wlandau.github.io/crew/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"tasks-vs-workers","dir":"Articles","previous_headings":"","what":"Tasks vs workers","title":"Introduction to crew","text":"task piece R code, expression function call. worker non-interactive R process runs one tasks. tasks run workers, local R session free responsive, work gets done faster. example, vignette shows crew mirai work together speed Shiny apps.","code":""},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"how-to-use-crew","dir":"Articles","previous_headings":"","what":"How to use crew","title":"Introduction to crew","text":"First, create controller object manage tasks workers. Next, start controller create mirai client. Later, done controller, call controller$terminate() clean resources. Use push() submit new task pop() return completed task. side effect, methods push(), pop(), scale() also launch workers run tasks. controller uses transient workers backlog tasks, may need loop pop() scale() multiple times make sure enough workers always available. Alternatively, wait() loop repeatedly checks tasks launches workers tasks complete. return value task result column. full list output task object returned pop(). name: task name given. command: character string R command save_command set TRUE push(). result: list containing return value R command. seconds: number seconds task ran. seed: single integer originally supplied push(), NA seed supplied NULL. algorithm: name pseudo-random number generator algorithm originally supplied push(), NA algorithm supplied NULL. error: first 2048 characters error message task threw error, NA otherwise. trace: first 2048 characters text traceback task threw error, NA otherwise. warnings: first 2048 characters. text warning messages task may generated, NA otherwise. launcher: name crew launcher task ran. seed algorithm non-missing output, can recover pseudo-random number generator state task using set.seed(seed = seed, kind = algorithm). However, recommended supply NULL arguments push(), case observe NA outputs. seed algorithm NULL, random number generator defaults recommended widely spaced worker-specific L’Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details.","code":"library(crew) controller <- crew_controller_local(   name = \"example\",   workers = 2,   seconds_idle = 10 ) controller$start() controller$push(name = \"get pid\", command = ps::ps_pid()) controller$pop() # No workers started yet and the task is not done. #> NULL  task <- controller$pop() # Worker started, task complete. task #> # A tibble: 1 × 12 #>   name    command result seconds  seed algorithm error trace warnings #>   <chr>   <chr>   <list>   <dbl> <int> <chr>     <chr> <chr> <chr> #> 1 get pid NA      <int>        0    NA NA        NA    NA    NA #> # ℹ 3 more variables: launcher <chr>, worker <int>, instance <chr> controller$wait(mode = \"all\") task$result[[1]] # return value of the task #> [1] 69631"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"synchronous-functional-programming","dir":"Articles","previous_headings":"","what":"Synchronous functional programming","title":"Introduction to crew","text":"map() method controller supports functional programming similar purrr::map() clustermq::Q(). arguments map() mostly push(), new iterate argument define inputs individual tasks. map() submits whole collection tasks, auto-scales workers, waits tasks finish, returns results tibble. , map() submits one task compute 1 + 2 + 5 + 6 another task compute 3 + 4 + 5 + 6. lists vectors inside iterate vary task task, elements data globals stay constant across tasks. least one task map() throws error, default behavior error main session return results, happens, results available controller$error. return results instead setting controller$error, regardless error status, set error = \"warn\" \"silent\" map(). conserve memory, consider setting controller$error <- NULL done troubleshooting.","code":"results <- controller$map(   command = a + b + c + d,   iterate = list(     a = c(1, 3),     b = c(2, 4)   ),   data = list(c = 5),   globals = list(d = 6) )  results #> # A tibble: 2 × 12 #>   name  command result    seconds  seed algorithm error trace warnings #>   <chr> <chr>   <list>      <dbl> <int> <chr>     <chr> <chr> <chr> #> 1 1     NA      <dbl [1]>       0    NA NA        NA    NA    NA #> 2 2     NA      <dbl [1]>       0    NA NA        NA    NA    NA #> # ℹ 3 more variables: launcher <chr>, worker <int>, instance <chr>  as.numeric(results$result) #> [1] 14 18"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"asynchronous-functional-programming","dir":"Articles","previous_headings":"","what":"Asynchronous functional programming","title":"Introduction to crew","text":"walk() method just like map(), wait tasks complete. Instead, returns control local R session immediately lets things tasks run background. collect() pops completed tasks. Put together, walk(), wait(mode = \"\"), collect() overall effect map(). However, subtle differences synchronous asynchronous functional programming methods: map() requires empty controller start (prior tasks). walk(), controller can number running unpopped tasks beforehand. wait() show progress bar misleading lot prior tasks. map() requires controller empty initially (.e. (1)), shows progress bar correctly representing amount work left .","code":"controller$walk(   command = a + b + c + d,   iterate = list(     a = c(1, 3),     b = c(2, 4)   ),   data = list(c = 5),   globals = list(d = 6) ) controller$wait(mode = \"all\")  controller$collect() #> # A tibble: 2 × 12 #>   name  command result    seconds  seed algorithm error trace warnings #>   <chr> <chr>   <list>      <dbl> <int> <chr>     <chr> <chr> <chr> #> 1 1     NA      <dbl [1]>       0    NA NA        NA    NA    NA #> 2 2     NA      <dbl [1]>       0    NA NA        NA    NA    NA #> # ℹ 3 more variables: launcher <chr>, worker <int>, instance <chr>"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"summaries","dir":"Articles","previous_headings":"","what":"Summaries","title":"Introduction to crew","text":"controller summary shows many tasks worker ran, many total seconds spent running tasks, many tasks threw warnings errors. launcher summary counts number times worker launched, shows total number assigned completed tasks past terminated instances worker. addition, shows whether current worker instance actively connected (“online”) connected point life cycle (“discovered”) last call controller$launcher$tally(). Finally, client summary shows --date worker status mirai::daemons().","code":"controller$summary() #> # A tibble: 2 × 6 #>   controller worker tasks seconds errors warnings #>   <chr>       <int> <int>   <dbl>  <int>    <int> #> 1 example         1     2   0.001      0        0 #> 2 example         2     1   0          0        0 controller$launcher$summary() #> # A tibble: 2 × 6 #>   worker launches online discovered assigned complete #>    <int>    <int> <lgl>  <lgl>         <int>    <int> #> 1      1        2 TRUE   TRUE              0        0 #> 2      2        1 TRUE   TRUE              0        0 controller$client$summary() #> # A tibble: 2 × 6 #>   worker online instances assigned complete socket #>    <int> <lgl>      <int>    <int>    <int> <chr> #> 1      1 FALSE          1        2        2 ws://10.0.0.32:58685/1/15e07250… #> 2      2 FALSE          1        1        1 ws://10.0.0.32:58685/2/cb45b3d4…"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Introduction to crew","text":"crew utilizes background processes, may consume lot memory big data workloads. common cause crashes running computer memory. running crew targets pipeline (explained targets user manual), consider setting storage = \"worker\" retrieval = \"worker tar_option_set() minimize memory consumption local processes (see also performance chapter). crew version 0.9.5.9007, monitor resources supplying log file path log_resources argument controller. way, normal controller methods write log side effect every seconds_interval seconds. output file comma-separated values (CSV) file can read R readr::read_csv(). new observation log file comes resources() client method: rss stands “resident set size”, total random access memory (RAM) consumed process, including shared libraries may also use different processes. pid process ID, time character string time stamp data recorded. (Use .POSIXct() convert time date type, e.g. visualization.) output , \"client\" refers local R process running controller, \"dispatcher\" refers mirai dispatcher process, special background R process sends tasks workers. output resources() include dispatcher, means dispatcher running. (Either crash, possibly due maxing memory, start controller yet.) workers included output resources() may running different computers, monitoring resource consumption require case--case plugin-specific approaches.","code":"controller$client$resources() #> # A tibble: 2 × 5 #>   name         pid status        rss time                    #> * <chr>      <int> <chr>       <dbl> <chr>                   #> 1 client      6821 running 319029248 2024-08-05 08:26:28 EDT #> 2 dispatcher  7168 running  24985600 2024-08-05 08:26:28 EDT"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"termination","dir":"Articles","previous_headings":"","what":"Termination","title":"Introduction to crew","text":"Call terminate() controller finish using . terminate() tries close mirai dispatcher workers may still running. important free resources. mirai dispatcher process exit , , can manually terminate process ps::ps_kill(p = controller$client$dispatcher) call crew_clean() terminate dispatchers current previous R sessions.","code":"controller$terminate() crew_clean() #> nothing to clean up"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"monitoring-local-processes","dir":"Articles","previous_headings":"","what":"Monitoring local processes","title":"Introduction to crew","text":"crew controller creates different types local processes. include: Dispatchers: every controller special local process called “dispatcher”. mirai needs process orchestrate tasks. Workers: R processes crew launches run tasks. may local processes case crew_controller_local(), may processes different computers using third-party launcher plugin like crew.cluster crew.aws.batch. launches processes. Daemons: R processes created mirai outside crew run tasks. processes may spawn automatically set processes argument e.g. crew.aws.batch::crew_controller_aws_batch() positive integer. Usually processes terminate parent R session exits controller terminates, rare circumstances may continue running. “local monitor” crew makes easy list terminate processes may running local computer. Example: crew_monitor_local() manages processes running local computer. manage crew workers running different computers, SLURM AWS Batch, please familiarize given computing platform, consider using monitor objects relevant third-party plugin packages crew.cluster crew.aws.batch. Example: https://wlandau.github.io/crew.aws.batch/index.html#job-management.","code":"monitor <- crew_monitor_local() monitor$dispatchers() # List PIDs of all local {mirai} dispatcher processes. #> [1] 31215 monitor$daemons() #> integer(0) monitor$workers() #> [1] 57001 57002 monitor$terminate(pid = c(57001, 57002)) monitor$workers() #> integer(0)"},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"tuning-and-auto-scaling","dir":"Articles","previous_headings":"","what":"Tuning and auto-scaling","title":"Introduction to crew","text":"explained , push(), pop(), wait() launch new workers run tasks. number new workers depends number tasks time. addition, workers can shut work completes. words, crew automatically raises lowers number workers response fluctuations task workload. useful arguments -scaling, order importance, : seconds_idle: shut worker spends long waiting task. tasks_max: shut worker completes certain number tasks. seconds_wall: soft wall time worker. Please tune arguments achieve desired balance auto-scaling. two extremes auto-scaling clustermq-like persistent workers future-like transient workers, problematic way. Persistent workers: persistent worker launches , typically runs many tasks, stays running entire lifetime controller. Persistent workers minimize overhead quickly complete large numbers short tasks. However, risk spending much time idle state tasks run. Excessive idling wastes resources, impact colleagues shared cluster drive costs Amazon Web Services. Transient workers: transient worker terminates soon completes single task. subsequent task requires new transient worker run . Transient workers avoid excessive idling, frequent worker launches cause significant overhead slows computation whole.","code":""},{"path":"https://wlandau.github.io/crew/articles/introduction.html","id":"asynchronous-management-of-workers","dir":"Articles","previous_headings":"","what":"Asynchronous management of workers","title":"Introduction to crew","text":"launchers support local processes launch terminate workers asynchronously. example, cloud-based launcher may need make HTTP requests launch terminate workers e.g. AWS Batch, time-consuming requests happen background. Controllers support processes argument specify number local R processes churn worker launches terminations. Set processes = NULL disable async, can helpful troubleshooting.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"Launcher plugins","text":"crew lets users write custom launchers different types workers connect local network. crew.cluster package already plugins traditional high-performance computing schedulers (SLURM, SGE, LSF, PBS/TORQUE).","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"request-for-community-contributions","dir":"Articles","previous_headings":"","what":"📣 Request for community contributions 📣","title":"Launcher plugins","text":"launcher plugin framework aims extend crew modern platforms services like Google Cloud Run, Kubernetes, beyond. time writing, plugins cloud computing yet exist. access services know use , please consider contributing package plugins . maintainer crew love work !","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"Launcher plugins","text":"launcher plugins need become part crew package . can write plugin simple R script, write custom R package depends crew. Published packages launcher plugins powerful extensions enhance crew entire open-source community. See R Packages Hadley Wickham Jenny Bryan write R package.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Launcher plugins","text":"vignette demonstrates write crew launcher plugin. assumes prior familiarity R6 classes computing platform plugin.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Launcher plugins","text":"create launcher plugin, write R6 subclass crew_class_launcher launch_worker() method analogous one local process launcher. launch_worker() must accept arguments local process launch_worker() method, generate call crew_worker(), submit new job process run call.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"network","dir":"Articles","previous_headings":"","what":"Network","title":"Launcher plugins","text":"worker launches must able dial client local network. host argument crew_client() provides local IP address, port argument provides TCP port. controller helper function (see ) expose arguments host port order solve potential network problems like one. default, host local IP address. crew assumes local network secure. Please take time assess network security risks computing environment. Use risk.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"termination","dir":"Articles","previous_headings":"","what":"Termination","title":"Launcher plugins","text":"recommend implement optional terminate_worker() method. Although mirai way terminating workers, works worker already connected, reach workers fail connect hang crashed state. optional terminate_worker() method crew launcher plugin extra assurance workers exit. implement custom terminate_worker() method, must throw error (throw warning message) worker already terminated. addition, must accept handle identifies worker, handle must return value previous call launch_worker(). handle can kind R object: process ID, job name, R6 object returned callr::r_bg(), etc.","code":""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Launcher plugins","text":"following custom custom launcher class whose workers local R processes Unix-like systems. Inside launch_worker(), processx::process$new(command = bin, args = c(self$r_arguments, \"-e\", call)) line runs crew_worker() call external R process command line arguments r_arguments (supplied launcher created). process runs background, connects back crew mirai local network, accepts tasks push controller. processx::process$new() also returns handle terminate_worker() method can use force-terminate process appropriate. mirai way terminate workers, terminate_worker() method strictly required, useful safeguard case worker hangs crashed state establishes connection. Every launch_worker() method must accept arguments call, launcher, worker, instance. method actually need use arguments, must present function signature. call: text string call crew_worker(). name: text string informative name worker instance. launcher: text string name launcher. worker: positive integer index worker. Ranges 1 maximum number simultaneous workers configured controller. instance: text string instance worker launcher given worker index. see call object looks like, create new launcher run call() method.","code":"custom_launcher_class <- R6::R6Class(   classname = \"custom_launcher_class\",   inherit = crew::crew_class_launcher,   public = list(     launch_worker = function(call, name, launcher, worker, instance) {       bin <- file.path(R.home(\"bin\"), \"Rscript\")       processx::process$new(         command = bin,         args = c(self$r_arguments, \"-e\", call),         cleanup = FALSE       )     },     terminate_worker = function(handle) {       handle$signal(crew::crew_terminate_signal())     }   ) ) library(crew) launcher <- crew_launcher_local() launcher$call(   socket = \"ws://127.0.0.1:5000/3/aa9c59ea\",   launcher = \"my_launcher\",   worker = 3L,   instance = \"aa9c59ea\" ) #> [1] \"crew::crew_worker(settings = list(url = \\\"ws://127.0.0.1:5000/3/aa9c59ea\\\", asyncdial = FALSE, autoexit = 15L, cleanup = 1L, output = TRUE, maxtasks = Inf, idletime = Inf, walltime = Inf, timerstart = 0L, tls = NULL, rs = NULL), launcher = \\\"my_launcher\\\", worker = 3L, instance = \\\"aa9c59ea\\\")\""},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"helper","dir":"Articles","previous_headings":"","what":"Helper","title":"Launcher plugins","text":"useful helper function creates controllers custom launcher. : Accept arguments crew_controller_local(). Create client object using crew_client(). Create launcher object new() method custom launcher class. Create new controller using crew_controller(). Scan controller obvious errors using validate() method controller. Feel free borrow crew_controller_local() source code. packages, can use @inheritParams roxygen2 tag inherit documentation arguments instead writing hand. may want adjust default arguments based specifics platform, especially seconds_launch workers take long time launch.","code":"#' @title Create a controller with the custom launcher. #' @export #' @description Create an `R6` object to submit tasks and #'   launch workers. #' @inheritParams crew::crew_controller_local crew_controller_custom <- function(   name = \"custom controller name\",   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(),   seconds_interval = 0.5,   seconds_timeout = 30,   seconds_launch = 30,   seconds_idle = Inf,   seconds_wall = Inf,   retry_tasks = TRUE,   log_resources = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   r_arguments = NULL ) {   client <- crew::crew_client(     name = name,     workers = workers,     host = host,     port = port,     tls = tls,     seconds_interval = seconds_interval,     seconds_timeout = seconds_timeout,     retry_tasks = retry_tasks,     log_resources = log_resources   )   launcher <- custom_launcher_class$new(     name = name,     seconds_interval = seconds_interval,     seconds_timeout = seconds_timeout,     seconds_launch = seconds_launch,     seconds_idle = seconds_idle,     seconds_wall = seconds_wall,     tasks_max = tasks_max,     tasks_timers = tasks_timers,     reset_globals = reset_globals,     reset_packages = reset_packages,     reset_options = reset_options,     garbage_collection = garbage_collection,     launch_max = launch_max,     tls = tls,     r_arguments = r_arguments   )   controller <- crew::crew_controller(client = client, launcher = launcher)   controller$validate()   controller }"},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"informal-testing","dir":"Articles","previous_headings":"","what":"Informal testing","title":"Launcher plugins","text":"begin testing, please begin monitoring local processes remote jobs platform. case crew launcher creates local processes, sufficient start htop filter R processes, launch new R session monitor process table ps::ps(). However, ambitious launchers submit workers e.g. AWS Batch, may need open CloudWatch dashboard, view AWS billing dashboard testing. ready begin testing, try example README, use custom controller helper instead crew_controller_local(). First, create start controller. may wish monitor local processes computer make sure mirai dispatcher starts. Try pushing task gets local IP address process ID worker instance. Wait task complete look result. Please use result verify task really ran worker intended. process ID agree one handle (except Windows actual R process may different Rscript.exe process created first). addition, worker running different computer, worker IP address different local IP address. Since custom launcher creates local processes, IP addresses case, different SLURM AWS Batch launcher. set timeouts task limits, worker ran task still online. worker tasks, need launch. done, terminate controller. terminates mirai dispatcher process crew workers. Finally, use process monitoring interface computing platform operating system verify mirai dispatchers crew workers terminated.","code":"library(crew) controller <- crew_controller_custom(workers = 2) controller$start() controller$push(   name = \"get worker IP address and process ID\",   command = paste(getip::getip(type = \"local\"), ps::ps_pid()) ) controller$wait() result <- controller$pop() result$result[[1]] #> [1] \"192.168.0.2 27336\" getip::getip(type = \"local\") #> \"192.168.0.2\" controller$launcher$workers$handle[[1]]$get_pid() #> [1] 27336 controller$client$summary() #> # A tibble: 2 × 6 #>   worker online instances assigned complete socket #>    <int> <lgl>      <int>    <int>    <int> <chr> #> 1      1 TRUE           1        1        1 ws://10.0.0.32:50258/1/571bcda7… #> 2      2 FALSE          0        0        0 ws://10.0.0.32:50258/2/daf88d6e… controller$terminate()"},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"load-testing","dir":"Articles","previous_headings":"","what":"Load testing","title":"Launcher plugins","text":"informal testing succeeded, recommend scale testing ambitious scenarios. one example, can test workers can auto-scale quickly churn large number tasks.","code":"library(crew) controller <- crew_controller_custom(   seconds_idle = 2L,   workers = 2L ) controller$start() # Push 100 tasks for (index in seq_len(100L)) {   name <- paste0(\"task_\", index)   controller$push(name = name, command = index, data = list(index = index))   message(paste(\"push\", name)) } # Wait for the tasks to complete. controller$wait() # Wait for the workers to idle out and exit on their own. crew_retry(   ~all(controller$client$summary()$online == FALSE),   seconds_interval = 1,   seconds_timeout = 60 ) # Do the same for 100 more tasks. for (index in (seq_len(100L) + 100L)) {   name <- paste0(\"task_\", index)   controller$push(name = name, command = index, data = list(index = index))   message(paste(\"push\", name)) } controller$wait() crew_retry(   ~all(controller$client$summary()$online == FALSE),   seconds_interval = 1,   seconds_timeout = 60 ) # Collect the results. results <- NULL while (!is.null(result <- controller$pop(scale = FALSE))) {   if (!is.null(result)) {     results <- dplyr::bind_rows(results, result)   } } # Check the results all(sort(unlist(results$result)) == seq_len(200L)) #> [1] TRUE # View worker and task summaries. controller$summary() controller$client$summary() controller$launcher$summary() # Terminate the controller. controller$terminate() # Now outside crew, verify that the mirai dispatcher # and crew workers successfully terminated."},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"asynchrony","dir":"Articles","previous_headings":"","what":"Asynchrony","title":"Launcher plugins","text":"Depending launcher plugin, worker launches terminations can time-consuming. example, HTTP request AWS Batch can take couple seconds, latency becomes burdensome hundreds workers. Fortunately, crew launchers can run launches terminations asynchronously. launcher plugin developer, need : Expose processes argument launcher$new(). processes field sets many mirai daemons run locally churn quick requests. Execute launches terminations inside self$async$eval(), return resulting value launch_worker() terminate_worker(). Let’s demonstrate simple processx example. use case may silly workers local processx processes, principles apply replace processx cloud computing service like AWS Batch replace process IDs AWS Batch job IDs. launcher class looks like. work processx PIDs directly light easy send local async mirai daemons. self$async$eval() function accepts R code, data, packages run quick local asynchronous task, returns mirai::mirai() task object handle. handle$data returns results available, crew uses mirai::call_mirai() make sure tasks submitted launch_worker() resolved used terminate_worker(). controller helper includes processes argument sets many asynchronous mirai daemons create. Set processes NULL disable async use like ordinary synchronous controller. Creating controller , except user sets workers processes arguments. Remember, two different things: workers number serious workers run serious tasks push(), whereas processes number mirai daemons asynchronously launch terminate serious workers. Workers may may local, processes always local. async_controller$start() automatically launches 4 local processes asynchronously auto-scale workers, async_controller$terminate() automatically shuts 4 processes. Beyond , usage exactly .","code":"async_launcher_class <- R6::R6Class(   classname = \"custom_launcher_class\",   inherit = crew::crew_class_launcher,   public = list(     launch_worker = function(call, name, launcher, worker, instance) {       self$async$eval(         command = list(pid = process$new(bin, args = c(\"-e\", call))$get_pid()),         data = list(bin = file.path(R.home(\"bin\"), \"R\"), call = call),         packages = \"processx\"       )     },     terminate_worker = function(handle) {       self$async$eval(         command = crew::crew_terminate_process(handle$data$pid),         data = list(pid = handle$data$pid)       )     }   ) ) crew_controller_async <- function(   name = \"async controller name\",   workers = 1L,   host = \"127.0.0.1\",   port = NULL,   tls = crew::crew_tls(mode = \"none\"),   seconds_interval = 0.5,   seconds_timeout = 30,   seconds_launch = 30,   seconds_idle = Inf,   seconds_wall = Inf,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   processes = NULL # Number of local async daemons for worker launches etc. ) {   client <- crew::crew_client(     name = name,     workers = workers,     host = host,     port = port,     tls = tls,     seconds_interval = seconds_interval,     seconds_timeout = seconds_timeout   )   launcher <- async_launcher_class$new(     name = name,     seconds_interval = seconds_interval,     seconds_launch = seconds_launch,     seconds_idle = seconds_idle,     seconds_wall = seconds_wall,     tasks_max = tasks_max,     tasks_timers = tasks_timers,     reset_globals = reset_globals,     reset_packages = reset_packages,     reset_options = reset_options,     garbage_collection = garbage_collection,     launch_max = launch_max,     tls = tls,     processes = processes   )   controller <- crew::crew_controller(     client = client,     launcher = launcher   )   controller$validate()   controller } async_controller <- crew_controller_async(workers = 12, processes = 4)"},{"path":"https://wlandau.github.io/crew/articles/plugins.html","id":"managing-workers","dir":"Articles","previous_headings":"","what":"Managing workers","title":"Launcher plugins","text":"Usually crew workers terminate parent R session exits controller terminates, rare circumstances may continue running. help users plugin monitor manually terminate workers, please consider implementing job management utilities go launcher plugin. described introduction vignette, crew_monitor_local() helps manually list terminate local processes relevant crew. Source code local monitor GitHub, methods documented package website, example usage introduction vignette. addition, crew_monitor_aws_batch() implements several methods listing terminating AWS Batch jobs, well viewing CloudWatch logs. source code local monitor copied : Example usage:","code":"crew_monitor_local <- function() {   crew_class_monitor_local$new() }  crew_class_monitor_local <- R6::R6Class(   classname = \"crew_class_monitor_local\",   cloneable = FALSE,   public = list(     dispatchers = function() {       crew_monitor_pids(pattern = \"mirai::dispatcher\")     },     daemons = function() {       crew_monitor_pids(pattern = \"mirai::daemon\")     },     workers = function() {       crew_monitor_pids(pattern = \"crew::crew_worker\")     },     terminate = function(pids) {       lapply(as.integer(pids), crew::crew_terminate_process)     }   ) )  crew_monitor_pids <- function(pattern) {   processes <- ps::ps()   commands <- map(     processes$ps_handle,     ~tryCatch(ps::ps_cmdline(.x), error = function(condition) \"\")   )   filter <- grepl(pattern = pattern, x = as.character(commands), fixed = TRUE)   as.integer(sort(processes$pid[filter])) } monitor <- crew_monitor_local() monitor$dispatchers() # List PIDs of all local {mirai} dispatcher processes. #> [1] 31215 monitor$daemons() #> integer(0) monitor$workers() #> [1] 57001 57002 monitor$terminate(pid = c(57001, 57002)) monitor$workers() #> integer(0)"},{"path":[]},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"processes","dir":"Articles","previous_headings":"Resources","what":"Processes","title":"Known risks of crew","text":"crew package launches external R processes: Worker processes run tasks, may include expensive jobs cloud services like AWS Batch traditional clusters like SLURM. mirai dispatcher, R process send tasks workers retrieves results back. x crew controller, ps::ps_handle() process handle dispatcher retained x$client$dispatcher. event poorly-timed crash network error, processes may terminate properly. happens, continue run, may strain traditional clusters incur heavy expenses cloud. Please monitor platforms use manually terminate defunct hanging processes needed. list terminate local processes, please use crew_monitor_local() explained introduction vignette. manage monitor non-local high-performance computing workers SLURM AWS Batch, please familiarize given computing platform, consider using monitor objects relevant third-party plugin packages crew.cluster crew.aws.batch. Example: https://wlandau.github.io/crew.aws.batch/index.html#job-management.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"crashes","dir":"Articles","previous_headings":"Resources","what":"Crashes","title":"Known risks of crew","text":"local process mirai dispatcher process crash. common cause crashes running computer memory. “Resources” section introduction explains monitor memory usage. running crew targets pipeline (explained targets user manual), consider setting storage = \"worker\" retrieval = \"worker tar_option_set() minimize memory consumption local processes (see also performance chapter). addition, crew worker processes may crash silently runtime, may fail launch connect . reasons may platform-specific, common possibilities: Memory: worker exhausts available memory limits, crash, way relay informative error message. Please grant workers computer memory think might happened. crew.aws.batch crew.cluster expose special platform-specific parameters controllers . Connections: worker must run local network controlling R process, must able dial controlling process TCP. Firewalls proxies may interfere, safeguards exist good reason, please ensure custom networking safe secure. example, likely secure connections pass public internet. AWS Batch, recommend run controlling R process workers isolated security group points (details: https://wlandau.github.io/crew.aws.batch/#prerequisites). may discuss system administrator. Tasks: R code may crash segfault worker cause abruptly exit. happens, see can isolate problem locally, debug code caused crash.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"ports","dir":"Articles","previous_headings":"Resources","what":"Ports","title":"Known risks of crew","text":"addition, crew occupies one TCP port per controller. TCP ports range 0 65535, around 16000 ports considered ephemeral dynamic, please careful run many controllers simultaneously shared machines, especially controller group. terminate() frees ports processes use.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"security","dir":"Articles","previous_headings":"","what":"Security","title":"Known risks of crew","text":"default, crew uses unencrypted TCP connections transactions among workers. compromised network, attacker can read data transit, even gain direct access client host.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"perimeters","dir":"Articles","previous_headings":"Security","what":"Perimeters","title":"Known risks of crew","text":"best avoid persistent direct connections local computer public internet. host argument controller public IP address. Instead, please try operate entirely within perimeter firewall, virtual private network (VPN), Amazon Web Services (AWS) security group. case AWS, security group can open ports . way, crew workers e.g. AWS Batch jobs can connect crew client running security group AWS Batch job EC2 instance.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"encryption","dir":"Articles","previous_headings":"Security","what":"Encryption","title":"Known risks of crew","text":"age Zero Trust, perimeters alone seldom sufficient. Transport layer security (TLS) encrypts data protect hackers travels network. TLS state art encryption network communications, responsible security popular protocols HTTPS SSH. TLS based public key cryptography, requires two files: private key file lives protected location host machine. public key file sent remote machine side connection. use TLS crew automatic configuration, simply set tls = crew_tls(mode = \"automatic\") controller, e.g. crew_controller_local().1 mirai generates one-time key pair encrypts data current crew client. key pair expires client terminates, reduces risk breach. addition, public key self-signed certificate, somewhat protects tampering way client server.","code":""},{"path":"https://wlandau.github.io/crew/articles/risks.html","id":"certificate-authorities","dir":"Articles","previous_headings":"Security","what":"Certificate authorities","title":"Known risks of crew","text":"signature self-signed certificate helps server verify public key valid private key somewhere. However, “man---middle” (MITM) attack, private key belong malicious hacker instead true client. certificate authority (CA) trusted third party vouches authenticity certificate. CA-backed certificate secure self-signed one. supply CA-backed certificate crew: Create PEM-formatted private key file matching PEM-formatted certificate file. Details https://www.feistyduck.com/library/openssl-cookbook/online/ Chapter 1.2: Key Certificate Management. done step, least private key file, matching signed certificate, root certificate CA. private key encrypted, also password. mode: \"custom\". key: file path private key. pass: private key password private key encrypted. hard-code value R code files. Instead, use package like keyring mask password. certificates: Character vector file paths certificates. One option supply certificate. However, extra security, may wish supply entire certificate chain. case, set certificates character vector certificate file paths order appear chain. Begin certificate, list certificate signed , certificate signed one, . final certificate root certificate CA. , supply crew_tls() object tls argument functions like crew_controller_local() (plugin developers, crew_client()). mirai, nanonext, NNG manage encryption behind scenes. details configuring TLS, please read https://github.com/shikokuchuo/mirai#distributed-computing-tls-secure-connections.","code":""},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"Asynchronous Shiny apps","text":"crew efficient use Shiny apps, centralized controller makes programming easy, even thousands tasks. vignette shows two versions example app. first version simple code choppily. second version feels snappier uses integration promises mirai.","code":""},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"example-coin-flips-no-promises","dir":"Articles","previous_headings":"","what":"Example: coin flips, no promises","title":"Asynchronous Shiny apps","text":"app simulates thousands coin flips determine coin fair. coin flip task, crew runs tasks parallel. run app, clock keeps ticking even coin flips running. words, parallel tasks run background app stays interactive.","code":""},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"tutorial","dir":"Articles","previous_headings":"Example: coin flips, no promises","what":"Tutorial","title":"Asynchronous Shiny apps","text":"first load Shiny. flip_coin() function simulates coin flip: wait 0.1 seconds, randomly return 1 heads 0 tails. many flips, user may deduce coin slightly unfair. UI button flip coins text output results. server, start creating crew controller simulate coin flips parallel across 10 parallel workers. seconds_idle = 10 means worker automatically exits idles 10 seconds. keep running totals heads, tails, total flips. action button submits batch 1000 coin flips. include observe() statement watch finished coin flips update totals every 0.5 seconds. Finally, text output refreshes every 0.5 seconds update clock totals. text output refreshes show current time number coin flips submitted yet completed. refresh happens batch coin flips submitted, coin flip completes, full second passed.","code":"library(shiny) flip_coin <- function() {   Sys.sleep(0.1)   rbinom(n = 1, size = 1, prob = 0.501) } ui <- fluidPage(   div(\"Is the coin fair?\"),   actionButton(\"button\", \"Flip 1000 coins\"),   textOutput(\"results\") ) server <- function(input, output, session) {   controller <- crew::crew_controller_local(workers = 10, seconds_idle = 10)   controller$start()   onStop(function() controller$terminate()) flips <- reactiveValues(heads = 0, tails = 0, total = 0) observeEvent(input$button, {     controller$walk(       command = flip_coin(),       iterate = list(index = seq_len(1000)),       data = list(flip_coin = flip_coin)     )   }) observe({     invalidateLater(millis = 500)     results <- controller$collect(error = \"stop\")     req(results)     new_flips <- as.logical(results$result)     flips$heads <- flips$heads + sum(new_flips)     flips$tails <- flips$tails + sum(1 - new_flips)     flips$total <- flips$total + length(new_flips)   }) output$results <- renderText({     invalidateLater(millis = 500)     pattern <- \"%s | %s heads, %s tails, %s total\"     time <- format(Sys.time(), \"%H:%M:%S\")     sprintf(pattern, time, flips$heads, flips$tails, flips$total)   }) }"},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"full-app-code","dir":"Articles","previous_headings":"Example: coin flips, no promises","what":"Full app code","title":"Asynchronous Shiny apps","text":"","code":"library(shiny)  flip_coin <- function() {   Sys.sleep(0.1)   rbinom(n = 1, size = 1, prob = 0.55) }  ui <- fluidPage(   div(\"Is the coin fair?\"),   actionButton(\"button\", \"Flip 1000 coins\"),   textOutput(\"results\") )  server <- function(input, output, session) {   # crew controller   controller <- crew::crew_controller_local(workers = 10, seconds_idle = 10)   controller$start()   onStop(function() controller$terminate())      # Keep running totals of heads, tails, and total flips.   flips <- reactiveValues(heads = 0, tails = 0, total = 0)      # Flip a batch of coins when the button is pressed.   observeEvent(input$button, {     controller$walk(       command = flip_coin(),       iterate = list(index = seq_len(1000)),       data = list(flip_coin = flip_coin)     )   })    # Collect coin flip results.   observe({     invalidateLater(millis = 500)     results <- controller$collect(error = \"stop\")     req(results)     new_flips <- as.logical(results$result)     flips$heads <- flips$heads + sum(new_flips)     flips$tails <- flips$tails + sum(1 - new_flips)     flips$total <- flips$total + length(new_flips)   })      # Print time and flip counts.   output$results <- renderText({     invalidateLater(millis = 500)     pattern <- \"%s | %s heads, %s tails, %s total\"     time <- format(Sys.time(), \"%H:%M:%S\")     sprintf(pattern, time, flips$heads, flips$tails, flips$total)   }) }  shinyApp(ui = ui, server = server)"},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"example-coin-flips-with-promises","dir":"Articles","previous_headings":"","what":"Example: coin flips, with promises","title":"Asynchronous Shiny apps","text":"previous app feels choppy refreshes every half second. Using powerful integration promises mirai, can make UI respond soon task finishes. Watch video see difference:","code":""},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"tutorial-1","dir":"Articles","previous_headings":"Example: coin flips, with promises","what":"Tutorial","title":"Asynchronous Shiny apps","text":"revised app three changes. First, need unobtrusive background loop auto-scale crew workers. enable , call controller$autoscale() just start(). Second, take mirai task returned controller$push() turn special promise. promise updates coin flip counts soon flip finishes. Finally, collect_flips() function collects finished flips updates flip counts.","code":"controller$start() controller$autoscale() onStop(function() controller$terminate()) observeEvent(   input$button,   replicate(     1000,     controller$push(flip_coin(), data = list(flip_coin = flip_coin)) %...>%       collect_flips(controller, flips)   ) ) collect_flips <- function(ignore, controller, flips) {   new_flips <- as.integer(controller$collect(error = \"stop\")$result)   if (!length(new_flips)) return()   flips$heads <- flips$heads + sum(new_flips)   flips$tails <- flips$tails + sum(1 - new_flips)   flips$total <- flips$total + length(new_flips) }"},{"path":"https://wlandau.github.io/crew/articles/shiny.html","id":"full-app-code-1","dir":"Articles","previous_headings":"Example: coin flips, with promises","what":"Full app code","title":"Asynchronous Shiny apps","text":"","code":"library(promises) library(shiny)  flip_coin <- function() {   Sys.sleep(0.1)   rbinom(n = 1, size = 1, prob = 0.55) }  collect_flips <- function(ignore, controller, flips) {   new_flips <- as.integer(controller$collect(error = \"stop\")$result)   if (!length(new_flips)) return()   flips$heads <- flips$heads + sum(new_flips)   flips$tails <- flips$tails + sum(1 - new_flips)   flips$total <- flips$total + length(new_flips) }  ui <- fluidPage(   div(\"Is the coin fair?\"),   actionButton(\"button\", \"Flip 1000 coins\"),   textOutput(\"results\") )  server <- function(input, output, session) {   # crew controller   controller <- crew::crew_controller_local(workers = 10, seconds_idle = 10)   controller$start()   controller$autoscale()   onStop(function() controller$terminate())      # Keep running totals of heads, tails, and total flips.   flips <- reactiveValues(heads = 0, tails = 0, total = 0)      # Flip a batch of coins when the button is pressed.   observeEvent(     input$button,     replicate(       1000,       controller$push(flip_coin(), data = list(flip_coin = flip_coin)) %...>%         collect_flips(controller, flips)     )   )    # Print time and flip counts.   output$results <- renderText({     invalidateLater(millis = 500)     pattern <- \"%s | %s heads, %s tails, %s total\"     time <- format(Sys.time(), \"%H:%M:%S\")     sprintf(pattern, time, flips$heads, flips$tails, flips$total)   }) }  shinyApp(ui = ui, server = server)"},{"path":"https://wlandau.github.io/crew/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Daniel Woodie. Contributor. Eli Lilly Company. Copyright holder.","code":""},{"path":"https://wlandau.github.io/crew/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landau WM (2024). crew: Distributed Worker Launcher Framework. R package version 0.9.5.9011, https://github.com/wlandau/crew, https://wlandau.github.io/crew/.","code":"@Manual{,   title = {crew: A Distributed Worker Launcher Framework},   author = {William Michael Landau},   year = {2024},   note = {R package version 0.9.5.9011, https://github.com/wlandau/crew},   url = {https://wlandau.github.io/crew/}, }"},{"path":"https://wlandau.github.io/crew/index.html","id":"crew-a-distributed-worker-launcher-framework-","dir":"","previous_headings":"","what":"A Distributed Worker Launcher Framework","title":"A Distributed Worker Launcher Framework","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. NNG-powered mirai R package sleek sophisticated scheduler efficiently processes intense workloads. crew package extends mirai unifying interface third-party worker launchers. Inspiration also comes packages future, rrq, clustermq, batchtools.","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"id_-request-for-community-contributions-","dir":"","previous_headings":"","what":"📣 Request for community contributions 📣","title":"A Distributed Worker Launcher Framework","text":"launcher plugin framework aims extend crew modern platforms services like Google Cloud Run, Kubernetes, beyond. time writing, plugins cloud computing yet exist. access services know use , please consider contributing package plugins . tutorial https://wlandau.github.io/crew/articles/plugins.html explains . maintainer crew love work !","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A Distributed Worker Launcher Framework","text":"documentation website https://wlandau.github.io/crew/ includes function reference tutorial vignettes linked . Introduction crew Controller groups Integration Shiny write launcher plugins Known risks crew","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"risks","dir":"","previous_headings":"","what":"Risks","title":"A Distributed Worker Launcher Framework","text":"crew package unavoidable risks, user responsible safety, security, computational resources. Please read software license vignette specific known risks.","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"similar-work","dir":"","previous_headings":"","what":"Similar work","title":"A Distributed Worker Launcher Framework","text":"mirai: powerful R framework asynchronous tasks built NNG. purpose crew extend mirai different computing platforms distributed workers. rrq: task queue R based Redis. rrqueue: predecessor rrq. clustermq: sends R function calls jobs computing clusters. future: unified interface asynchronous evaluation single tasks map-reduce calls wide variety backend technologies. batchtools: tools computation batch systems. targets: Make-like pipeline tool R. later: delayed evaluation synchronous tasks. promises: minimally-invasive asynchronous programming small number tasks within Shiny apps. callr: initiates R process R processes. High-performance computing CRAN task view.","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"A Distributed Worker Launcher Framework","text":"crew package incorporates insightful ideas following people. Charlie Gao created mirai nanonext graciously accommodated complicated demanding feature requests made crew possible. Rich FitzJohn Robert Ashton developed rrq. Gábor Csárdi developed callr wrote edifying blog post implementing task queues. Kirill Müller created workers prototype, initial effort led directly current implementation crew. crew exist without Kirill’s insights orchestration models R processes. Henrik Bengtsson. Henrik’s future package ecosystem demonstrates incredible power consistent R interface top varying collection high-performance computing technologies. Michael Schubert. Michael’s clustermq package supports efficient high-performance computing traditional clusters, demonstrates value central R6 object manage entire collection persistent workers. David Kretch. paws R package powerful interface Amazon Web Services, documentation clearly communicates capabilities limitations AWS R users. Adam Banker, co-authored paws David Kretch. David Neuzerling. David’s lambdr package establishes helpful pattern submit collect AWS Lambda jobs R. Mark Edmondson. Mark maintains several R packages interface Google Cloud Platform googleCloudStorageR googleCloudRunner, started conversation around helping targets submit jobs Google Cloud Run. Joe Cheng sparking integration crew promises.","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Distributed Worker Launcher Framework","text":"Please note crew project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://wlandau.github.io/crew/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Distributed Worker Launcher Framework","text":"","code":"To cite package ‘crew’ in publications use:    Landau WM (2023). _crew: A Distributed Worker Launcher Framework_.   https://wlandau.github.io/crew/, https://github.com/wlandau/crew.  A BibTeX entry for LaTeX users is    @Manual{,     title = {crew: A Distributed Worker Launcher Framework},     author = {William Michael Landau},     year = {2023},     note = {https://wlandau.github.io/crew/, https://github.com/wlandau/crew},   }"},{"path":"https://wlandau.github.io/crew/reference/crew-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crew: a distributed worker launcher framework — crew-package","title":"crew: a distributed worker launcher framework — crew-package","text":"computationally demanding analysis projects, statisticians data scientists asynchronously deploy long-running tasks distributed systems, ranging traditional clusters cloud services. NNG-powered mirai R package sleek sophisticated scheduler efficiently processes intense workloads. crew package extends mirai unifying interface third-party worker launchers. Inspiration also comes packages future, rrq, clustermq, batchtools.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Crew assertion — crew_assert","title":"Crew assertion — crew_assert","text":"Assert condition true.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crew assertion — crew_assert","text":"","code":"crew_assert(value = NULL, ..., message = NULL, envir = parent.frame())"},{"path":"https://wlandau.github.io/crew/reference/crew_assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crew assertion — crew_assert","text":"value object condition. ... Conditions use \".\" symbol refer object. message Optional message print error. envir Environment evaluate condition.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crew assertion — crew_assert","text":"NULL (invisibly). Throws error condition true.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crew assertion — crew_assert","text":"","code":"crew_assert(1 < 2) crew_assert(\"object\", !anyNA(.), nzchar(.)) tryCatch(   crew_assert(2 < 1),   crew_error = function(condition) message(\"false\") ) #> false"},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Local asynchronous client object. — crew_async","title":"Local asynchronous client object. — crew_async","text":"Create R6 object manage local asynchronous quick tasks error detection.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local asynchronous client object. — crew_async","text":"","code":"crew_async(workers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local asynchronous client object. — crew_async","text":"workers Number local mirai daemons run asynchronous tasks. NULL, tasks evaluated synchronously.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local asynchronous client object. — crew_async","text":"R6 async client object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local asynchronous client object. — crew_async","text":"crew_async() objects created inside launchers allow launcher plugins run local tasks asynchronously, calls cloud APIs launch serious remote workers.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local asynchronous client object. — crew_async","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { x <- crew_async() x$start() out <- x$eval(1 + 1) mirai::call_mirai_(out) out$data # 2 x$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 async class. — crew_class_async","title":"R6 async class. — crew_class_async","text":"R6 class async configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 async class. — crew_class_async","text":"See crew_async().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 async class. — crew_class_async","text":"workers See crew_async(). instance Name current instance.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 async class. — crew_class_async","text":"crew_class_async$new() crew_class_async$validate() crew_class_async$start() crew_class_async$terminate() crew_class_async$started() crew_class_async$asynchronous() crew_class_async$eval()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 async class. — crew_class_async","text":"TLS configuration constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$new(workers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 async class. — crew_class_async","text":"workers Argument passed crew_async().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"R6 object TLS configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"R6 async class. — crew_class_async","text":"Validate object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"R6 async class. — crew_class_async","text":"Start local workers error handling socket.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$start()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 async class. — crew_class_async","text":"create workers error handling socket workers NULL object already started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"R6 async class. — crew_class_async","text":"Start local workers error handling socket.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$terminate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 async class. — crew_class_async","text":"Waits existing tasks complete first.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-started-","dir":"Reference","previous_headings":"","what":"Method started()","title":"R6 async class. — crew_class_async","text":"Show whether object started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$started()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"Logical length 1, whether object started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-asynchronous-","dir":"Reference","previous_headings":"","what":"Method asynchronous()","title":"R6 async class. — crew_class_async","text":"Show whether object asynchronous (real workers).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$asynchronous()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"Logical length 1, whether object asynchronous.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"R6 async class. — crew_class_async","text":"Run local asynchronous task using local compute profile.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 async class. — crew_class_async","text":"","code":"crew_class_async$eval(   command,   substitute = TRUE,   data = list(),   packages = character(0L),   library = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 async class. — crew_class_async","text":"command R code run. substitute Logical length 1, whether substitute command. FALSE, command must expression object language object. data Named list data objects required run command. packages Character vector packages load. library Character vector library paths load packages .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 async class. — crew_class_async","text":"Used launcher plugins asynchronous launches terminations. processes NULL, task run locally. Otherwise, task run local process local mirai compute profile.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_async.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 async class. — crew_class_async","text":"processes field NULL, list object named data containing result evaluating expr synchronously. Otherwise, task evaluated asynchronously, result mirai task object. Either way, data element return value contain result task.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 client class. — crew_class_client","title":"R6 client class. — crew_class_client","text":"R6 class mirai clients.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 client class. — crew_class_client","text":"See crew_client().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 client class. — crew_class_client","text":"name See crew_client(). workers See crew_client(). host See crew_client(). port See crew_client(). tls See crew_client(). seconds_interval See crew_client(). seconds_timeout See crew_client(). retry_tasks See crew_client() log_resources Path log file logging resources. throttle Throttle object logging resources. relay Relay object event-driven programming downstream condition variable. started Whether client started. client Process ID local process running client. dispatcher Process ID mirai dispatcher","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 client class. — crew_class_client","text":"crew_class_client$new() crew_class_client$validate() crew_class_client$start() crew_class_client$terminate() crew_class_client$condition() crew_class_client$resolved() crew_class_client$summary() crew_class_client$resources() crew_class_client$log()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 client class. — crew_class_client","text":"mirai client constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$new(   name = NULL,   workers = NULL,   host = NULL,   port = NULL,   tls = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   retry_tasks = NULL,   log_resources = NULL,   relay = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 client class. — crew_class_client","text":"name Argument passed crew_client(). workers Argument passed crew_client(). host Argument passed crew_client(). port Argument passed crew_client(). tls Argument passed crew_client(). seconds_interval Argument passed crew_client(). seconds_timeout Argument passed crew_client(). retry_tasks Argument passed crew_client(). log_resources Argument passed crew_client(). relay Argument passed crew_client().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"R6 object client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 client class. — crew_class_client","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() client$log() client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"R6 client class. — crew_class_client","text":"Validate client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"R6 client class. — crew_class_client","text":"Start listening workers available sockets.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$start()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"R6 client class. — crew_class_client","text":"Stop mirai client disconnect worker websockets.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$terminate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-condition-","dir":"Reference","previous_headings":"","what":"Method condition()","title":"R6 client class. — crew_class_client","text":"Get nanonext condition variable tasks signal resolution.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$condition()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"nanonext condition variable tasks signal resolution. return value NULL client running.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-resolved-","dir":"Reference","previous_headings":"","what":"Method resolved()","title":"R6 client class. — crew_class_client","text":"Get true value nanonext condition variable.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$resolved()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"value nanonext condition variable.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"R6 client class. — crew_class_client","text":"Show informative worker log.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$summary()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"tibble information workers, NULL client started. tibble 1 row per worker following columns: worker: integer index worker. online: TRUE worker online connected websocket URL, FALSE otherwise. instances: integer, number instances mirai daemons (crew workers) connected websocket URL life cycle listener. assigned: number tasks assigned current websocket URL. complete: number tasks completed current websocket URL. socket: websocket URL. crew changes token end URL path periodically safeguard managing workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-resources-","dir":"Reference","previous_headings":"","what":"Method resources()","title":"R6 client class. — crew_class_client","text":"Get resource usage local crew processes.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$resources()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"tibble one row per process, including current R process (\"client\") mirai dispatcher. dispatcher included output, means dispatcher process running. Columns include: * name: friendly name process (\"client\" \"dispatcher\") * pid: process ID. * status: process status (ps::ps_status()). * rss: resident set size (RSS). RS total memory held process, including shared libraries may also use processes. RSS obtained ps::ps_memory_info() shown bytes. * time: character string time stamp data recorded. Generated format(Sys.time(), \"%Y-%m-%d %H:%M:%S %Z\"). Use .POSIXct() convert value date, e.g. plot rss vs time.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"method-log-","dir":"Reference","previous_headings":"","what":"Method log()","title":"R6 client class. — crew_class_client","text":"Write resource consumption resources() log_resources file originally supplied client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 client class. — crew_class_client","text":"","code":"crew_class_client$log(throttle = FALSE)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 client class. — crew_class_client","text":"throttle TRUE throttle interval seconds_interval seconds avoid overburdening system writing log file. FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 client class. — crew_class_client","text":"called controller side effect, logging throttled happen frequently seconds_interval seconds. exception explicit log() controller method. log file one row per observation process, including current R process (\"client\") mirai dispatcher. dispatcher included output, means dispatcher process running. Columns include: * type: type process (client dispatcher) * pid: process ID. * status: process status (ps::ps_status()). * rss: resident set size (RSS). RS total memory held process, including shared libraries may also use processes. RSS obtained ps::ps_memory_info() shown bytes. * elapsed: number elapsed seconds since R process started (proc.time()[\"elapsed\"]).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 client class. — crew_class_client","text":"NULL (invisibly). Writes log file log_resources originally given. log file comma-separated values (CSV) format can easily read readr::read_csv(). log_resources NULL, log() effect.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 client class. — crew_class_client","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() client$log() client$terminate() }  ## ------------------------------------------------ ## Method `crew_class_client$new` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() client$log() client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":null,"dir":"Reference","previous_headings":"","what":"Controller class — crew_class_controller","title":"Controller class — crew_class_controller","text":"R6 class controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"See crew_controller().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Controller class — crew_class_controller","text":"client Router object. launcher Launcher object. tasks list mirai::mirai() task objects. pushed Number tasks pushed since controller started. popped Number tasks popped since controller started. error Tibble task results (one result per row) last call map(error = \"stop). backlog Character vector explicitly backlogged tasks. autoscaling TRUE FALSE, whether async later-based auto-scaling currently running","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Controller class — crew_class_controller","text":"crew_class_controller$new() crew_class_controller$validate() crew_class_controller$empty() crew_class_controller$nonempty() crew_class_controller$resolved() crew_class_controller$unresolved() crew_class_controller$unpopped() crew_class_controller$saturated() crew_class_controller$start() crew_class_controller$started() crew_class_controller$launch() crew_class_controller$scale() crew_class_controller$autoscale() crew_class_controller$descale() crew_class_controller$push() crew_class_controller$walk() crew_class_controller$map() crew_class_controller$pop() crew_class_controller$collect() crew_class_controller$promise() crew_class_controller$wait() crew_class_controller$push_backlog() crew_class_controller$pop_backlog() crew_class_controller$summary() crew_class_controller$log() crew_class_controller$cancel() crew_class_controller$terminate()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Controller class — crew_class_controller","text":"mirai controller constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$new(client = NULL, launcher = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"client Router object. See crew_controller(). launcher Launcher object. See crew_controller().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"R6 controller object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Controller class — crew_class_controller","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() launcher <- crew_launcher_local() controller <- crew_controller(client = client, launcher = launcher) controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop() controller$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Controller class — crew_class_controller","text":"Validate client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-empty-","dir":"Reference","previous_headings":"","what":"Method empty()","title":"Controller class — crew_class_controller","text":"Check controller empty.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$empty(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"controller empty running tasks completed tasks waiting retrieved push().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"TRUE controller empty, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-nonempty-","dir":"Reference","previous_headings":"","what":"Method nonempty()","title":"Controller class — crew_class_controller","text":"Check controller nonempty.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$nonempty(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"controller empty running tasks completed tasks waiting retrieved push().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"TRUE controller empty, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-resolved-","dir":"Reference","previous_headings":"","what":"Method resolved()","title":"Controller class — crew_class_controller","text":"Number resolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$resolved(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"resolved() cumulative: counts resolved tasks entire lifetime controller session.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Non-negative integer length 1, number resolved mirai() tasks. return value 0 condition variable exist (.e. client running).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-unresolved-","dir":"Reference","previous_headings":"","what":"Method unresolved()","title":"Controller class — crew_class_controller","text":"Number unresolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$unresolved(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Non-negative integer length 1, number unresolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-unpopped-","dir":"Reference","previous_headings":"","what":"Method unpopped()","title":"Controller class — crew_class_controller","text":"Number resolved mirai() tasks available via pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$unpopped(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Non-negative integer length 1, number resolved mirai() tasks available via pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-saturated-","dir":"Reference","previous_headings":"","what":"Method saturated()","title":"Controller class — crew_class_controller","text":"Check controller saturated.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$saturated(   collect = NULL,   throttle = NULL,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"collect Deprecated version 0.5.0.9003 (2023-10-02). used. throttle Deprecated version 0.5.0.9003 (2023-10-02). used. controller used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"controller saturated number unresolved tasks greater equal maximum number workers. words, saturated controller, every available worker task. can still push tasks saturated controller, tools use crew targets may choose .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"TRUE controller saturated, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"Controller class — crew_class_controller","text":"Start controller already started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$start(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"Register mirai client register worker websockets launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-started-","dir":"Reference","previous_headings":"","what":"Method started()","title":"Controller class — crew_class_controller","text":"Check whether controller started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$started(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"Actually checks whether client started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"TRUE controller started, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-launch-","dir":"Reference","previous_headings":"","what":"Method launch()","title":"Controller class — crew_class_controller","text":"Launch one workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$launch(n = 1L, controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"n Number workers try launch. actual number launched capped \"workers\" workers running given time, \"workers\" argument crew_controller(). actual cap \"workers\" argument minus number connected workers minus number starting workers. \"connected\" worker active websocket connection mirai client, \"starting\" means worker launched seconds_start seconds ago, seconds_start also argument crew_controller(). controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-scale-","dir":"Reference","previous_headings":"","what":"Method scale()","title":"Controller class — crew_class_controller","text":"Auto-scale workers meet demand tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$scale(throttle = TRUE, controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"scale() method re-launches inactive backlogged workers, additional inactive workers needed accommodate demand unresolved tasks. worker \"backlogged\" assigned tasks completed far. Methods push(), pop(), wait() already invoke scale() scale argument TRUE. finer control number workers launched, call launch() controller exact desired number workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-autoscale-","dir":"Reference","previous_headings":"","what":"Method autoscale()","title":"Controller class — crew_class_controller","text":"Run worker auto-scaling private later loop every controller$client$seconds_interval seconds.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$autoscale(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"Call controller$descale() terminate auto-scaling loop.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-descale-","dir":"Reference","previous_headings":"","what":"Method descale()","title":"Controller class — crew_class_controller","text":"Terminate auto-scaling loop started controller$autoscale().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$descale(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-push-","dir":"Reference","previous_headings":"","what":"Method push()","title":"Controller class — crew_class_controller","text":"Push task head task list.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$push(   command,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_timeout = NULL,   scale = TRUE,   throttle = TRUE,   name = NA_character_,   save_command = FALSE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"command Language object R code run. data Named list local data objects evaluation environment. globals Named list objects temporarily assign global environment task. list include functions previously defined global environment required run tasks. See reset_globals argument crew_controller_local(). substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). scale Logical, whether automatically call scale() auto-scale workers meet demand task load. Also see throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. name Optional name task. Must character string NA. save_command Logical length 1. TRUE, controller deparses command returns output pop(). FALSE (default), controller skips step increase speed. controller used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Invisibly return mirai object pushed task. allows interact task directly, e.g. create promise object promises::.promise().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-walk-","dir":"Reference","previous_headings":"","what":"Method walk()","title":"Controller class — crew_class_controller","text":"Apply single command multiple inputs, return control user without waiting task complete.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$walk(   command,   iterate,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_timeout = NULL,   names = NULL,   save_command = FALSE,   scale = TRUE,   throttle = TRUE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"command Language object R code run. iterate Named list vectors lists iterate . example, run function calls f(x = 1, y = \"\") f(x = 2, y = \"b\"), set command f(x, y), set iterate list(x = c(1, 2), y = c(\"\", \"b\")). individual function calls evaluated f(x = iterate$x[[1]], y = iterate$y[[1]]) f(x = iterate$x[[2]], y = iterate$y[[2]]). elements iterate must length. name conflicts iterate data, iterate takes precedence. data Named list constant local data objects evaluation environment. Objects list treated single values held constant iteration map. globals Named list constant objects temporarily assign global environment task. list include functions previously defined global environment required run tasks. See reset_globals argument crew_controller_local(). Objects list treated single values held constant iteration map. substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). names Optional character length 1, name element iterate names tasks. names supplied, iterate[[names]] must character vector. save_command Logical length 1, whether store text string version R command output. scale Logical, whether automatically scale workers meet demand. See also throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controller used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-9","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"contrast walk(), map() blocks local R session waits tasks complete.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Invisibly returns list mirai task objects newly created tasks. order tasks list matches order data iterate argument.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-map-","dir":"Reference","previous_headings":"","what":"Method map()","title":"Controller class — crew_class_controller","text":"Apply single command multiple inputs, wait tasks complete, return results tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$map(   command,   iterate,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_interval = 0.5,   seconds_timeout = NULL,   names = NULL,   save_command = FALSE,   error = \"stop\",   warnings = TRUE,   verbose = interactive(),   scale = TRUE,   throttle = TRUE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"command Language object R code run. iterate Named list vectors lists iterate . example, run function calls f(x = 1, y = \"\") f(x = 2, y = \"b\"), set command f(x, y), set iterate list(x = c(1, 2), y = c(\"\", \"b\")). individual function calls evaluated f(x = iterate$x[[1]], y = iterate$y[[1]]) f(x = iterate$x[[2]], y = iterate$y[[2]]). elements iterate must length. name conflicts iterate data, iterate takes precedence. data Named list constant local data objects evaluation environment. Objects list treated single values held constant iteration map. globals Named list constant objects temporarily assign global environment task. list include functions previously defined global environment required run tasks. See reset_globals argument crew_controller_local(). Objects list treated single values held constant iteration map. substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_interval Number seconds wait auto-scaling operations waiting tasks complete. seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). names Optional character length 1, name element iterate names tasks. names supplied, iterate[[names]] must character vector. save_command Logical length 1, whether store text string version R command output. error Character length 1, choice action task error. Possible values: \"stop\": throw error main R session instead returning value. case error, results last errored map() error field controller, e.g. controller_object$error. reduce memory consumption, set controller_object$error <- NULL finished troubleshooting. \"warn\": throw warning. allows return value error messages tracebacks generated. \"silent\": nothing special. warnings Logical length 1, whether throw warning interactive session least one task encounters error. verbose Logical length 1, whether print progress messages. scale Logical, whether automatically scale workers meet demand. See also throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controller used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-10","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"map() used unless prior tasks completed popped. may need wait pop manually. Alternatively, can start : either call terminate() current controller object reset , create new controller object entirely.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"tibble results metadata: one row per task columns corresponding output pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-pop-","dir":"Reference","previous_headings":"","what":"Method pop()","title":"Controller class — crew_class_controller","text":"Pop completed task results data frame.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$pop(   scale = TRUE,   collect = NULL,   throttle = TRUE,   error = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"scale Logical length 1, whether automatically call scale() auto-scale workers meet demand task load. Scaling pop() may important transient nearly transient workers tend drop quickly little work. See also throttle argument. collect Deprecated version 0.5.0.9003 (2023-10-02). throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. error NULL character length 1, choice action popped task threw error. Possible values: \"stop\": throw error main R session instead returning value. \"warn\": throw warning. NULL \"silent\": react errors. controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-11","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"task currently completed, pop() attempt auto-scale workers needed.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"task collect, return NULL. Otherwise, return one-row tibble following columns. name: task name given. command: character string R command save_command set TRUE push(). result: list containing return value R command. seconds: number seconds task ran. seed: single integer originally supplied push(), NA otherwise. pseudo-random number generator state just prior task can restored using set.seed(seed = seed, kind = algorithm), seed algorithm part output. algorithm: name pseudo-random number generator algorithm originally supplied push(), NA otherwise. pseudo-random number generator state just prior task can restored using set.seed(seed = seed, kind = algorithm), seed algorithm part output. status: character string. \"success\" task throw error, \"cancel\" task canceled cancel() controller method, \"error\" task threw error. code: integer code denoting specific exit status: 0 successful tasks, 1 tasks error R command task, another positive integer NNG status code error NNG/nanonext level. error: first 2048 characters error message task threw error, NA otherwise. trace: first 2048 characters text traceback task threw error, NA otherwise. warnings: first 2048 characters. text warning messages task may generated, NA otherwise. launcher: name crew launcher task ran.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-collect-","dir":"Reference","previous_headings":"","what":"Method collect()","title":"Controller class — crew_class_controller","text":"Pop available task results return tidy tibble.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$collect(   scale = TRUE,   throttle = TRUE,   error = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"scale Logical length 1, whether automatically call scale() auto-scale workers meet demand task load. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. error NULL character length 1, choice action popped task threw error. Possible values: \"stop\": throw error main R session instead returning value. \"warn\": throw warning. NULL \"silent\": react errors. controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"tibble results metadata resolved tasks, one row per task. Returns NULL tasks collect.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-promise-","dir":"Reference","previous_headings":"","what":"Method promise()","title":"Controller class — crew_class_controller","text":"Create promises::promise() object asynchronously pop collect one tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$promise(   mode = \"one\",   seconds_interval = 0.1,   scale = NULL,   throttle = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"mode Character length 1, kind promise create. mode must \"one\" \"\". Details: mode \"one\", promise fulfilled (rejected) least one task resolved available pop(). happens, pop() runs asynchronously, pops result task list, returns value. task succeeded, promise fulfilled value result pop() (one-row tibble result metadata). task threw error, error message task forwarded error callbacks registered promise. mode \"\", promise fulfilled (rejected) unresolved tasks left controller. (careful: condition trivially met moment controller empty submitted tasks, best create kind promise submit tasks.) unresolved tasks left, collect() runs asynchronously, pops available results task list, returns value. task succeeded, promise fulfilled value result collect() (tibble one row per task result). tasks threw error, first error message detected forwarded error callbacks registered promise. seconds_interval Positive numeric length 1, delay later::later() polling interval asynchronously check promise can resolved. scale Deprecated 2024-04-10 (version 0.9.1.9003) longer used. Now, promise() always turns auto-scaling private later loop (already activated). throttle Deprecated 2024-04-10 (version 0.9.1.9003) longer used. Now, promise() always turns auto-scaling private later loop (already activated). controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-12","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"Please aware pop() collect() happen asynchronously unpredictable time promise object created, even local R process appears something completely different. behavior highly desirable Shiny reactive context, please careful may surprising situations.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"promises::promise() object whose eventual value tibble results one popped tasks. mode = \"one\", one task popped returned (one row). mode = \"\", tasks returned tibble one row per task (NULL returned tasks pop).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-wait-","dir":"Reference","previous_headings":"","what":"Method wait()","title":"Controller class — crew_class_controller","text":"Wait tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$wait(   mode = \"all\",   seconds_interval = 0.5,   seconds_timeout = Inf,   scale = TRUE,   throttle = TRUE,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"mode Character length 1: \"\" wait tasks complete, \"one\" wait single task complete. seconds_interval Number seconds interrupt wait order scale workers needed. seconds_timeout Timeout length seconds waiting tasks. scale Logical, whether automatically call scale() auto-scale workers meet demand task load. See also throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-13","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"wait() method blocks calling R session repeatedly auto-scales workers tasks need . function runs either times condition mode met.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"logical length 1, invisibly. TRUE condition mode met, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-push-backlog-","dir":"Reference","previous_headings":"","what":"Method push_backlog()","title":"Controller class — crew_class_controller","text":"Push name task backlog.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$push_backlog(name, controller = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"name Character length 1 task name push backlog. controller used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-14","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"pop_backlog() pops tasks can pushed without saturating controller.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-pop-backlog-","dir":"Reference","previous_headings":"","what":"Method pop_backlog()","title":"Controller class — crew_class_controller","text":"Pop task names head backlog can pushed without saturating controller.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$pop_backlog(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"Character vector task names can pushed controller without saturating . controller saturated, character(0L) returned.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Controller class — crew_class_controller","text":"Summarize workers tasks controller.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$summary(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"data frame summary statistics workers tasks. one row per worker websocket following columns: controller: name controller. .  * worker: integer index worker. tasks: number tasks completed worker websocket returned calling pop() controller object. seconds: total number runtime seconds tasks ran worker connected websocket retrieved calling pop() controller object. errors: total number tasks ran worker website, encountered error R, retrieved pop(). warnings: total number tasks ran worker website, encountered one warnings R, retrieved pop(). Note: warnings actually number tasks, number warnings. (task throw one warning.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-log-","dir":"Reference","previous_headings":"","what":"Method log()","title":"Controller class — crew_class_controller","text":"Write resource consumption log_resources file.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$log(throttle = FALSE)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"throttle TRUE throttle interval seconds_interval seconds avoid overburdening system writing log file. FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"details-15","dir":"Reference","previous_headings":"","what":"Details","title":"Controller class — crew_class_controller","text":"log file one row per observation process, including current R process (\"client\") mirai dispatcher. dispatcher included output, means dispatcher process running. Columns include: * type: type process (client dispatcher) * pid: process ID. * status: process status (ps::ps_status()). * rss: resident set size (RSS). RS total memory held process, including shared libraries may also use processes. RSS obtained ps::ps_memory_info() shown bytes. * elapsed: number elapsed seconds since R process started (proc.time()[\"elapsed\"]).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly). Writes log file log_resources originally given. log file comma-separated values (CSV) format can easily read readr::read_csv(). log_resources NULL, log() effect.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-cancel-","dir":"Reference","previous_headings":"","what":"Method cancel()","title":"Controller class — crew_class_controller","text":"Cancel one tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$cancel(names = character(0L), all = FALSE)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"names Character vector names tasks cancel. names must manually supplied push(). TRUE cancel tasks, FALSE otherwise. = TRUE supersedes names argument.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"Controller class — crew_class_controller","text":"Terminate workers mirai client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller class — crew_class_controller","text":"","code":"crew_class_controller$terminate(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller class — crew_class_controller","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller class — crew_class_controller","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Controller class — crew_class_controller","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() launcher <- crew_launcher_local() controller <- crew_controller(client = client, launcher = launcher) controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop() controller$terminate() }  ## ------------------------------------------------ ## Method `crew_class_controller$new` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() launcher <- crew_launcher_local() controller <- crew_controller(client = client, launcher = launcher) controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop() controller$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Controller group class — crew_class_controller_group","title":"Controller group class — crew_class_controller_group","text":"R6 class controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"See crew_controller_group().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Controller group class — crew_class_controller_group","text":"controllers List R6 controller objects. relay Relay object event-driven programming downstream condition variable.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Controller group class — crew_class_controller_group","text":"crew_class_controller_group$new() crew_class_controller_group$validate() crew_class_controller_group$empty() crew_class_controller_group$nonempty() crew_class_controller_group$resolved() crew_class_controller_group$unresolved() crew_class_controller_group$unpopped() crew_class_controller_group$saturated() crew_class_controller_group$start() crew_class_controller_group$started() crew_class_controller_group$launch() crew_class_controller_group$scale() crew_class_controller_group$autoscale() crew_class_controller_group$descale() crew_class_controller_group$push() crew_class_controller_group$walk() crew_class_controller_group$map() crew_class_controller_group$pop() crew_class_controller_group$collect() crew_class_controller_group$promise() crew_class_controller_group$wait() crew_class_controller_group$push_backlog() crew_class_controller_group$pop_backlog() crew_class_controller_group$summary() crew_class_controller_group$terminate()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Controller group class — crew_class_controller_group","text":"Multi-controller constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$new(controllers = NULL, relay = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers List R6 controller objects. relay Relay object event-driven programming downstream condition variable.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"R6 object controller group object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Controller group class — crew_class_controller_group","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { persistent <- crew_controller_local(name = \"persistent\") transient <- crew_controller_local(   name = \"transient\",   tasks_max = 1L ) group <- crew_controller_group(persistent, transient) group$start() group$push(name = \"task\", command = sqrt(4), controller = \"transient\") group$wait() group$pop() group$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Controller group class — crew_class_controller_group","text":"Validate client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-empty-","dir":"Reference","previous_headings":"","what":"Method empty()","title":"Controller group class — crew_class_controller_group","text":"See controllers empty.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$empty(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"controller empty running tasks completed tasks waiting retrieved push().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"TRUE selected controllers empty, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-nonempty-","dir":"Reference","previous_headings":"","what":"Method nonempty()","title":"Controller group class — crew_class_controller_group","text":"Check controller group nonempty.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$nonempty(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"controller empty running tasks completed tasks waiting retrieved push().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"TRUE controller empty, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-resolved-","dir":"Reference","previous_headings":"","what":"Method resolved()","title":"Controller group class — crew_class_controller_group","text":"Number resolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$resolved(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"resolved() cumulative: counts resolved tasks entire lifetime controller session.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Non-negative integer length 1, number resolved mirai() tasks. return value 0 condition variable exist (.e. client running).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-unresolved-","dir":"Reference","previous_headings":"","what":"Method unresolved()","title":"Controller group class — crew_class_controller_group","text":"Number unresolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$unresolved(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Non-negative integer length 1, number unresolved mirai() tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-unpopped-","dir":"Reference","previous_headings":"","what":"Method unpopped()","title":"Controller group class — crew_class_controller_group","text":"Number resolved mirai() tasks available via pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$unpopped(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Non-negative integer length 1, number resolved mirai() tasks available via pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-saturated-","dir":"Reference","previous_headings":"","what":"Method saturated()","title":"Controller group class — crew_class_controller_group","text":"Check controller saturated.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$saturated(   collect = NULL,   throttle = NULL,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"collect Deprecated version 0.5.0.9003 (2023-10-02). used. throttle Deprecated version 0.5.0.9003 (2023-10-02). used. controller Character vector length 1 controller name. Set NULL select default controller push() choose.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"controller saturated number unresolved tasks greater equal maximum number workers. words, saturated controller, every available worker task. can still push tasks saturated controller, tools use crew targets may choose .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"TRUE selected controllers saturated, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"Controller group class — crew_class_controller_group","text":"Start one controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$start(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-started-","dir":"Reference","previous_headings":"","what":"Method started()","title":"Controller group class — crew_class_controller_group","text":"Check whether given controllers started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$started(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"Actually checks whether given clients started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"TRUE controllers started, FALSE .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-launch-","dir":"Reference","previous_headings":"","what":"Method launch()","title":"Controller group class — crew_class_controller_group","text":"Launch one workers one controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$launch(n = 1L, controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"n Number workers launch controller selected. controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-scale-","dir":"Reference","previous_headings":"","what":"Method scale()","title":"Controller group class — crew_class_controller_group","text":"Automatically scale number workers needed one controller objects.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$scale(throttle = TRUE, controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"See scale() method individual controller classes.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-autoscale-","dir":"Reference","previous_headings":"","what":"Method autoscale()","title":"Controller group class — crew_class_controller_group","text":"Run worker auto-scaling private later loop every controller$client$seconds_interval seconds.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$autoscale(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-descale-","dir":"Reference","previous_headings":"","what":"Method descale()","title":"Controller group class — crew_class_controller_group","text":"Terminate auto-scaling loop started controller$autoscale().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$descale(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-push-","dir":"Reference","previous_headings":"","what":"Method push()","title":"Controller group class — crew_class_controller_group","text":"Push task head task list.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$push(   command,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_timeout = NULL,   scale = TRUE,   throttle = TRUE,   name = NA_character_,   save_command = FALSE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"command Language object R code run. data Named list local data objects evaluation environment. globals Named list objects temporarily assign global environment task. See reset_globals argument crew_controller_local(). substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). scale Logical, whether automatically scale workers meet demand. See scale argument push() method ordinary single controllers. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. name Optional name task. Replaced random name NULL conflict existing name task list. save_command Logical length 1. TRUE, controller deparses command returns output pop(). FALSE (default), controller skips step increase speed. controller Character length 1, name controller submit task. NULL, controller defaults first controller list.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Invisibly return mirai object pushed task. allows interact task directly, e.g. create promise object promises::.promise().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-walk-","dir":"Reference","previous_headings":"","what":"Method walk()","title":"Controller group class — crew_class_controller_group","text":"Apply single command multiple inputs, return control user without waiting task complete.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$walk(   command,   iterate,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_timeout = NULL,   names = NULL,   save_command = FALSE,   scale = TRUE,   throttle = TRUE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"command Language object R code run. iterate Named list vectors lists iterate . example, run function calls f(x = 1, y = \"\") f(x = 2, y = \"b\"), set command f(x, y), set iterate list(x = c(1, 2), y = c(\"\", \"b\")). individual function calls evaluated f(x = iterate$x[[1]], y = iterate$y[[1]]) f(x = iterate$x[[2]], y = iterate$y[[2]]). elements iterate must length. name conflicts iterate data, iterate takes precedence. data Named list constant local data objects evaluation environment. Objects list treated single values held constant iteration map. globals Named list constant objects temporarily assign global environment task. list include functions previously defined global environment required run tasks. See reset_globals argument crew_controller_local(). Objects list treated single values held constant iteration map. substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). names Optional character length 1, name element iterate names tasks. names supplied, iterate[[names]] must character vector. save_command Logical length 1, whether store text string version R command output. scale Logical, whether automatically scale workers meet demand. See also throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controller Character length 1, name controller submit tasks. NULL, controller defaults first controller list.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"contrast walk(), map() blocks local R session waits tasks complete.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Invisibly returns list mirai task objects newly created tasks. order tasks list matches order data iterate argument.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-map-","dir":"Reference","previous_headings":"","what":"Method map()","title":"Controller group class — crew_class_controller_group","text":"Apply single command multiple inputs.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$map(   command,   iterate,   data = list(),   globals = list(),   substitute = TRUE,   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL,   seconds_interval = 0.5,   seconds_timeout = NULL,   names = NULL,   save_command = FALSE,   error = \"stop\",   warnings = TRUE,   verbose = interactive(),   scale = TRUE,   throttle = TRUE,   controller = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"command Language object R code run. iterate Named list vectors lists iterate . example, run function calls f(x = 1, y = \"\") f(x = 2, y = \"b\"), set command f(x, y), set iterate list(x = c(1, 2), y = c(\"\", \"b\")). individual function calls evaluated f(x = iterate$x[[1]], y = iterate$y[[1]]) f(x = iterate$x[[2]], y = iterate$y[[2]]). elements iterate must length. name conflicts iterate data, iterate takes precedence. data Named list constant local data objects evaluation environment. Objects list treated single values held constant iteration map. globals Named list constant objects temporarily assign global environment task. list include functions previously defined global environment required run tasks. See reset_globals argument crew_controller_local(). Objects list treated single values held constant iteration map. substitute Logical length 1, whether call base::substitute() supplied value command argument. TRUE (default) command quoted literally write , e.g. push(command = your_function_call()). FALSE, crew assumes command language object passing value, e.g. push(command = quote(your_function_call())). substitute = TRUE appropriate interactive use, whereas substitute = FALSE meant automated R programs invoke crew controllers. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require(). seconds_interval Number seconds wait auto-scaling operations waiting tasks complete. seconds_timeout Optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds). names Optional character length 1, name element iterate names tasks. names supplied, iterate[[names]] must character vector. save_command Logical length 1, whether store text string version R command output. error Character vector length 1, choice action task error. Possible values: \"stop\": throw error main R session instead returning value. case error, results last errored map() error field controller, e.g. controller_object$error. reduce memory consumption, set controller_object$error <- NULL finished troubleshooting. \"warn\": throw warning. allows return value error messages tracebacks generated. \"silent\": nothing special. warnings Logical length 1, whether throw warning interactive session least one task encounters error. verbose Logical length 1, whether print progress messages. scale Logical, whether automatically scale workers meet demand. See also throttle argument. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controller Character length 1, name controller submit tasks. NULL, controller defaults first controller list.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"idea comes functional programming: example, map() function purrr package.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"tibble results metadata: one row per task columns corresponding output pop().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-pop-","dir":"Reference","previous_headings":"","what":"Method pop()","title":"Controller group class — crew_class_controller_group","text":"Pop completed task results data frame.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$pop(   scale = TRUE,   collect = NULL,   throttle = TRUE,   error = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"scale Logical, whether automatically scale workers meet demand. See scale argument pop() method ordinary single controllers. collect Deprecated version 0.5.0.9003 (2023-10-02). used. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. error NULL character length 1, choice action popped task threw error. Possible values: \"stop\": throw error main R session instead returning value. \"warn\": throw warning. NULL \"silent\": react errors. controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"task collect, return NULL. Otherwise, return one-row tibble columns pop() ordinary controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-collect-","dir":"Reference","previous_headings":"","what":"Method collect()","title":"Controller group class — crew_class_controller_group","text":"Pop available task results return tidy tibble.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$collect(   scale = TRUE,   throttle = TRUE,   error = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"scale Logical length 1, whether automatically call scale() auto-scale workers meet demand task load. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. error NULL character length 1, choice action popped task threw error. Possible values: \"stop\": throw error main R session instead returning value. \"warn\": throw warning. NULL \"silent\": react errors. controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"tibble results metadata resolved tasks, one row per task. Returns NULL available results.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-promise-","dir":"Reference","previous_headings":"","what":"Method promise()","title":"Controller group class — crew_class_controller_group","text":"Create promises::promise() object asynchronously pop collect one tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$promise(   mode = \"one\",   seconds_interval = 0.1,   scale = NULL,   throttle = NULL,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"mode Character length 1, kind promise create. mode must \"one\" \"\". Details: mode \"one\", promise fulfilled (rejected) least one task resolved available pop(). happens, pop() runs asynchronously, pops result task list, returns value. task succeeded, promise fulfilled value result pop() (one-row tibble result metadata). task threw error, error message task forwarded error callbacks registered promise. mode \"\", promise fulfilled (rejected) unresolved tasks left controller. (careful: condition trivially met moment controller empty submitted tasks, best create kind promise submit tasks.) unresolved tasks left, collect() runs asynchronously, pops available results task list, returns value. task succeeded, promise fulfilled value result collect() (tibble one row per task result). tasks threw error, first error message detected forwarded error callbacks registered promise. seconds_interval Positive numeric length 1, delay later::later() polling interval asynchronously check promise can resolved. scale Deprecated 2024-04-10 (version 0.9.1.9003) longer used. Now, promise() always turns auto-scaling private later loop (already activated). throttle Deprecated 2024-04-10 (version 0.9.1.9003) longer used. Now, promise() always turns auto-scaling private later loop (already activated). controllers used. Included ensure signature compatible analogous method controller groups.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-9","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"Please aware pop() collect() happen asynchronously unpredictable time promise object created, even local R process appears something completely different. behavior highly desirable Shiny reactive context, please careful may surprising situations.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"promises::promise() object whose eventual value tibble results one popped tasks. mode = \"one\", one task popped returned (one row). mode = \"\", tasks returned tibble one row per task (NULL returned tasks pop).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-wait-","dir":"Reference","previous_headings":"","what":"Method wait()","title":"Controller group class — crew_class_controller_group","text":"Wait tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$wait(   mode = \"all\",   seconds_interval = 0.5,   seconds_timeout = Inf,   scale = TRUE,   throttle = TRUE,   controllers = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"mode Character length 1: \"\" wait tasks controllers complete, \"one\" wait single task single controller complete. scheme, timeout limit applied controller sequentially, timeout treated completed controller. seconds_interval Number seconds interrupt wait order scale workers needed. seconds_timeout Timeout length seconds waiting results become available. scale Logical length 1, whether call scale_later() selected controller schedule auto-scaling. See scale argument wait() method ordinary single controllers. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources. controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-10","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"wait() method blocks calling R session repeatedly auto-scales workers tasks need . function runs either times condition mode met.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"logical length 1, invisibly. TRUE condition mode met, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-push-backlog-","dir":"Reference","previous_headings":"","what":"Method push_backlog()","title":"Controller group class — crew_class_controller_group","text":"Push name task backlog.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$push_backlog(name, controller = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"name Character length 1 task name push backlog. controller Character vector length 1 controller name. Set NULL select default controller push_backlog() choose.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"details-11","dir":"Reference","previous_headings":"","what":"Details","title":"Controller group class — crew_class_controller_group","text":"pop_backlog() pops tasks can pushed without saturating controller.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-pop-backlog-","dir":"Reference","previous_headings":"","what":"Method pop_backlog()","title":"Controller group class — crew_class_controller_group","text":"Pop task names head backlog can pushed without saturating controller.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$pop_backlog(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"Character vector task names can pushed controller without saturating . controller saturated, character(0L) returned.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Controller group class — crew_class_controller_group","text":"Summarize workers one controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$summary(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"data frame aggregated worker summary statistics selected controllers. one row per worker, rows grouped controller. See documentation summary() method controller class specific information columns output.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"Controller group class — crew_class_controller_group","text":"Terminate workers disconnect client one controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Controller group class — crew_class_controller_group","text":"","code":"crew_class_controller_group$terminate(controllers = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controller group class — crew_class_controller_group","text":"controllers Character vector controller names. Set NULL select controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"Controller group class — crew_class_controller_group","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_controller_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Controller group class — crew_class_controller_group","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { persistent <- crew_controller_local(name = \"persistent\") transient <- crew_controller_local(   name = \"transient\",   tasks_max = 1L ) group <- crew_controller_group(persistent, transient) group$start() group$push(name = \"task\", command = sqrt(4), controller = \"transient\") group$wait() group$pop() group$terminate() }  ## ------------------------------------------------ ## Method `crew_class_controller_group$new` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { persistent <- crew_controller_local(name = \"persistent\") transient <- crew_controller_local(   name = \"transient\",   tasks_max = 1L ) group <- crew_controller_group(persistent, transient) group$start() group$push(name = \"task\", command = sqrt(4), controller = \"transient\") group$wait() group$pop() group$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Launcher abstract class — crew_class_launcher","title":"Launcher abstract class — crew_class_launcher","text":"R6 abstract class build subclasses launch manage workers.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Launcher abstract class — crew_class_launcher","text":"workers Data frame worker information. name Name launcher. seconds_interval See crew_launcher(). seconds_timeout See crew_launcher(). seconds_launch See crew_launcher(). seconds_idle See crew_launcher(). seconds_wall See crew_launcher(). tasks_max See crew_launcher(). tasks_timers See crew_launcher(). reset_globals See crew_launcher(). reset_packages See crew_launcher(). reset_options See crew_launcher(). garbage_collection See crew_launcher(). launch_max See crew_launcher(). tls See crew_launcher(). processes See crew_launcher(). asynchronously. r_arguments See crew_launcher(). async crew_async() object run low-level launcher tasks asynchronously. throttle crew_throttle() object throttle scaling.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Launcher abstract class — crew_class_launcher","text":"crew_class_launcher$new() crew_class_launcher$validate() crew_class_launcher$set_name() crew_class_launcher$settings() crew_class_launcher$call() crew_class_launcher$start() crew_class_launcher$terminate() crew_class_launcher$summary() crew_class_launcher$tally() crew_class_launcher$unlaunched() crew_class_launcher$booting() crew_class_launcher$active() crew_class_launcher$done() crew_class_launcher$rotate() crew_class_launcher$launch() crew_class_launcher$forward() crew_class_launcher$errors() crew_class_launcher$wait() crew_class_launcher$scale() crew_class_launcher$launch_worker() crew_class_launcher$terminate_worker() crew_class_launcher$terminate_workers()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Launcher abstract class — crew_class_launcher","text":"Launcher constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   seconds_exit = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   processes = NULL,   r_arguments = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"name See crew_launcher(). seconds_interval See crew_launcher(). seconds_timeout See crew_launcher(). seconds_launch See crew_launcher(). seconds_idle See crew_launcher(). seconds_wall See crew_launcher(). seconds_exit See crew_launcher(). tasks_max See crew_launcher(). tasks_timers See crew_launcher(). reset_globals See crew_launcher(). reset_packages See crew_launcher(). reset_options See crew_launcher(). garbage_collection See crew_launcher(). launch_max See crew_launcher(). tls See crew_launcher(). processes See crew_launcher(). r_arguments See crew_launcher().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"R6 object launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launcher abstract class — crew_class_launcher","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(workers = client$workers) launcher$launch(index = 1L) m <- mirai::mirai(\"result\", .compute = client$name) Sys.sleep(0.25) m$data client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Launcher abstract class — crew_class_launcher","text":"Validate launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-set-name-","dir":"Reference","previous_headings":"","what":"Method set_name()","title":"Launcher abstract class — crew_class_launcher","text":"Set name launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$set_name(name)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"name Character length 1, name set launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-settings-","dir":"Reference","previous_headings":"","what":"Method settings()","title":"Launcher abstract class — crew_class_launcher","text":"List arguments mirai::daemon().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$settings(socket)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"socket Character length 1, websocket address worker launch.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"List arguments mirai::daemon().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-call-","dir":"Reference","previous_headings":"","what":"Method call()","title":"Launcher abstract class — crew_class_launcher","text":"Create call crew_worker() help create custom launchers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$call(socket, launcher, worker, instance)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"socket Socket worker receive tasks. launcher Character length 1, name launcher. worker Positive integer length 1, index worker. worker index remains even current instance worker exits new instance launches. instance Character length 1 uniquely identify instance worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Character length 1 call crew_worker().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Launcher abstract class — crew_class_launcher","text":"","code":"launcher <- crew_launcher_local() launcher$call(   socket = \"ws://127.0.0.1:5000/3/cba033e58\",   launcher = \"launcher_a\",   worker = 3L,   instance = \"cba033e58\" )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"Launcher abstract class — crew_class_launcher","text":"Start launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$start(sockets = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"sockets testing purposes .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"Creates workers data frame. Meant called beginning launcher life cycle, client started.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"Launcher abstract class — crew_class_launcher","text":"Terminate whole launcher, including workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$terminate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Launcher abstract class — crew_class_launcher","text":"Summarize workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$summary()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL launcher started. Otherwise, tibble one row per crew worker following columns: worker: integer index worker. launches: number times worker launched. launch occurs different websocket token end URL rotated new launch. online: logical vector, whether current instance worker actively connected NNG socket time last call tally(). discovered: logical vector, whether current instance worker connected NNG socket point (possibly disconnected) time last call tally(). assigned: cumulative number tasks assigned, reported mirai::daemons() summed completed instances worker. reflect activity currently running instance worker. complete: cumulative number tasks completed, reported mirai::daemons() summed completed instances worker. reflect activity currently running instance worker. socket: current websocket URL worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-tally-","dir":"Reference","previous_headings":"","what":"Method tally()","title":"Launcher abstract class — crew_class_launcher","text":"Update daemons-related columns internal workers data frame.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$tally(daemons = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"daemons mirai daemons matrix. testing . Users set .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-unlaunched-","dir":"Reference","previous_headings":"","what":"Method unlaunched()","title":"Launcher abstract class — crew_class_launcher","text":"Get indexes unlaunched workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$unlaunched(n = Inf)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"n Maximum number worker indexes return.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"worker \"unlaunched\" never connected current instance websocket. worker launches launch() method, considered \"launched\" disconnects websocket rotated rotate().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Integer index workers available launch. backlogged workers listed first. worker backlogged assigned tasks completed.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-booting-","dir":"Reference","previous_headings":"","what":"Method booting()","title":"Launcher abstract class — crew_class_launcher","text":"Get workers may still booting .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$booting()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"worker \"booting\" launch time within last seconds_launch seconds. seconds_launch configurable grace period crew allows worker start connect mirai dispatcher. booting() function know actual worker connection status, just knows launch times, may return TRUE workers already connected started tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-active-","dir":"Reference","previous_headings":"","what":"Method active()","title":"Launcher abstract class — crew_class_launcher","text":"Get active workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$active()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"worker \"active\" current instance online connected, within booting time window never connected. words, \"active\" means online | (!discovered & booting).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Logical vector TRUE active workers FALSE inactive ones.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-done-","dir":"Reference","previous_headings":"","what":"Method done()","title":"Launcher abstract class — crew_class_launcher","text":"Get done workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$done()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"worker \"done\" launched inactive. worker \"launched\" launch() called worker websocket rotated since.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Integer index inactive workers.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$rotate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"Rotate websockets unlaunched workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-launch-","dir":"Reference","previous_headings":"","what":"Method launch()","title":"Launcher abstract class — crew_class_launcher","text":"Launch worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$launch(index)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"index Positive integer length 1, index worker launch.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-forward-","dir":"Reference","previous_headings":"","what":"Method forward()","title":"Launcher abstract class — crew_class_launcher","text":"Forward asynchronous launch/termination error condition worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$forward(index, condition = \"error\")"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"index Integer length 1, index worker inspect. condition Character length 1 indicating error found. \"error\" throw error, \"warning\" throw warning, \"message\" print message, \"character\" return character vector specific task-level error messages. return value NULL error found.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Throw error, throw warning, return character string, depending condition argument.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-errors-","dir":"Reference","previous_headings":"","what":"Method errors()","title":"Launcher abstract class — crew_class_launcher","text":"Collect return recent error messages asynchronous worker launching termination.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$errors()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"Character vector recent error messages asynchronous worker launching termination. NULL errors.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-wait-","dir":"Reference","previous_headings":"","what":"Method wait()","title":"Launcher abstract class — crew_class_launcher","text":"Wait local asynchronous launch termination tasks complete.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$wait()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"relevant processes positive integer.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-scale-","dir":"Reference","previous_headings":"","what":"Method scale()","title":"Launcher abstract class — crew_class_launcher","text":"Auto-scale workers meet demand tasks.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$scale(demand, throttle = TRUE)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"demand Number unresolved tasks. throttle TRUE skip auto-scaling already happened within last seconds_interval seconds. FALSE auto-scale every time scale() called. Throttling avoids overburdening mirai dispatcher resources.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly)","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-launch-worker-","dir":"Reference","previous_headings":"","what":"Method launch_worker()","title":"Launcher abstract class — crew_class_launcher","text":"Abstract worker launch method.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$launch_worker(call, name, launcher, worker, instance)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"call Character length 1 namespaced call crew_worker() run worker accept tasks. name Character length 1 informative worker name. launcher Character length 1, name launcher. worker Positive integer length 1, index worker. worker index remains even current instance worker exits new instance launches. always 1 maximum number concurrent workers. instance Character length 1 uniquely identify current instance worker index launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"Launcher plugins overwrite method.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"handle mock worker launch.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-terminate-worker-","dir":"Reference","previous_headings":"","what":"Method terminate_worker()","title":"Launcher abstract class — crew_class_launcher","text":"Abstract worker termination method.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$terminate_worker(handle)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"handle handle object previously returned launch_worker() allows termination worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"Launcher abstract class — crew_class_launcher","text":"Launcher plugins overwrite method.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"handle mock worker termination.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"method-terminate-workers-","dir":"Reference","previous_headings":"","what":"Method terminate_workers()","title":"Launcher abstract class — crew_class_launcher","text":"Terminate one workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Launcher abstract class — crew_class_launcher","text":"","code":"crew_class_launcher$terminate_workers(index = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launcher abstract class — crew_class_launcher","text":"index Integer vector indexes workers terminate. NULL, current workers terminated.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Launcher abstract class — crew_class_launcher","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launcher abstract class — crew_class_launcher","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(workers = client$workers) launcher$launch(index = 1L) m <- mirai::mirai(\"result\", .compute = client$name) Sys.sleep(0.25) m$data client$terminate() }  ## ------------------------------------------------ ## Method `crew_class_launcher$new` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(workers = client$workers) launcher$launch(index = 1L) m <- mirai::mirai(\"result\", .compute = client$name) Sys.sleep(0.25) m$data client$terminate() }  ## ------------------------------------------------ ## Method `crew_class_launcher$call` ## ------------------------------------------------  launcher <- crew_launcher_local() launcher$call(   socket = \"ws://127.0.0.1:5000/3/cba033e58\",   launcher = \"launcher_a\",   worker = 3L,   instance = \"cba033e58\" ) #> [1] \"crew::crew_worker(settings = list(url = \\\"ws://127.0.0.1:5000/3/cba033e58\\\", asyncdial = FALSE, autoexit = 15L, cleanup = 1L, output = TRUE, maxtasks = Inf, idletime = Inf, walltime = Inf, timerstart = 0L, tls = NULL, rs = NULL), launcher = \\\"launcher_a\\\", worker = 3L, instance = \\\"cba033e58\\\")\""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local process launcher class — crew_class_launcher_local","title":"Local process launcher class — crew_class_launcher_local","text":"R6 class launch manage local process workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local process launcher class — crew_class_launcher_local","text":"See crew_launcher_local().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Local process launcher class — crew_class_launcher_local","text":"crew::crew_class_launcher -> crew_class_launcher_local","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Local process launcher class — crew_class_launcher_local","text":"local_log_directory See crew_launcher_local(). local_log_join See crew_launcher_local().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Local process launcher class — crew_class_launcher_local","text":"crew::crew_class_launcher$active() crew::crew_class_launcher$booting() crew::crew_class_launcher$call() crew::crew_class_launcher$done() crew::crew_class_launcher$errors() crew::crew_class_launcher$forward() crew::crew_class_launcher$launch() crew::crew_class_launcher$rotate() crew::crew_class_launcher$scale() crew::crew_class_launcher$set_name() crew::crew_class_launcher$settings() crew::crew_class_launcher$start() crew::crew_class_launcher$summary() crew::crew_class_launcher$tally() crew::crew_class_launcher$terminate() crew::crew_class_launcher$terminate_workers() crew::crew_class_launcher$unlaunched() crew::crew_class_launcher$wait()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Local process launcher class — crew_class_launcher_local","text":"crew_class_launcher_local$new() crew_class_launcher_local$validate() crew_class_launcher_local$launch_worker() crew_class_launcher_local$terminate_worker()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Local process launcher class — crew_class_launcher_local","text":"Local launcher constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"crew_class_launcher_local$new(   name = NULL,   seconds_interval = NULL,   seconds_timeout = NULL,   seconds_launch = NULL,   seconds_idle = NULL,   seconds_wall = NULL,   seconds_exit = NULL,   tasks_max = NULL,   tasks_timers = NULL,   reset_globals = NULL,   reset_packages = NULL,   reset_options = NULL,   garbage_collection = NULL,   launch_max = NULL,   tls = NULL,   processes = NULL,   r_arguments = NULL,   local_log_directory = NULL,   local_log_join = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local process launcher class — crew_class_launcher_local","text":"name See crew_launcher(). seconds_interval See crew_launcher(). seconds_timeout See crew_launcher(). seconds_launch See crew_launcher(). seconds_idle See crew_launcher(). seconds_wall See crew_launcher(). seconds_exit See crew_launcher(). tasks_max See crew_launcher(). tasks_timers See crew_launcher(). reset_globals See crew_launcher(). reset_packages See crew_launcher(). reset_options See crew_launcher(). garbage_collection See crew_launcher(). launch_max See crew_launcher(). tls See crew_launcher(). processes See crew_launcher(). r_arguments See crew_launcher(). local_log_directory See crew_launcher_local(). local_log_join See crew_launcher_local().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Local process launcher class — crew_class_launcher_local","text":"R6 object local launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(sockets = client$summary()$socket) launcher$launch(index = 1L) task <- mirai::mirai(\"result\", .compute = client$name) mirai::call_mirai_(task) task$data client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Local process launcher class — crew_class_launcher_local","text":"Validate local launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"crew_class_launcher_local$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Local process launcher class — crew_class_launcher_local","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"method-launch-worker-","dir":"Reference","previous_headings":"","what":"Method launch_worker()","title":"Local process launcher class — crew_class_launcher_local","text":"Launch local process worker dial socket.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"crew_class_launcher_local$launch_worker(call, name, launcher, worker, instance)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local process launcher class — crew_class_launcher_local","text":"call Character length 1 namespaced call crew_worker() run worker accept tasks. name Character length 1 long informative worker name contains launcher, worker, instance arguments described . launcher Character length 1, name launcher. worker Positive integer length 1, index worker. worker index remains even current instance worker exits new instance launches. always 1 maximum number concurrent workers. instance Character length 1 uniquely identify current instance worker index launcher.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Local process launcher class — crew_class_launcher_local","text":"call argument R code run initiate worker. Together, launcher, worker, instance arguments useful constructing informative job names.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Local process launcher class — crew_class_launcher_local","text":"handle object allow termination worker later .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"method-terminate-worker-","dir":"Reference","previous_headings":"","what":"Method terminate_worker()","title":"Local process launcher class — crew_class_launcher_local","text":"Terminate local process worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"crew_class_launcher_local$terminate_worker(handle)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local process launcher class — crew_class_launcher_local","text":"handle process handle object previously returned launch_worker().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Local process launcher class — crew_class_launcher_local","text":"list process ID worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_launcher_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local process launcher class — crew_class_launcher_local","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(sockets = client$summary()$socket) launcher$launch(index = 1L) task <- mirai::mirai(\"result\", .compute = client$name) mirai::call_mirai_(task) task$data client$terminate() }  ## ------------------------------------------------ ## Method `crew_class_launcher_local$new` ## ------------------------------------------------  if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(sockets = client$summary()$socket) launcher$launch(index = 1L) task <- mirai::mirai(\"result\", .compute = client$name) mirai::call_mirai_(task) task$data client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local monitor class — crew_class_monitor_local","title":"Local monitor class — crew_class_monitor_local","text":"Local monitor R6 class","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local monitor class — crew_class_monitor_local","text":"See crew_monitor_local().","code":""},{"path":[]},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Local monitor class — crew_class_monitor_local","text":"crew_class_monitor_local$dispatchers() crew_class_monitor_local$daemons() crew_class_monitor_local$workers() crew_class_monitor_local$terminate()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"method-dispatchers-","dir":"Reference","previous_headings":"","what":"Method dispatchers()","title":"Local monitor class — crew_class_monitor_local","text":"List process IDs running mirai dispatcher processes.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local monitor class — crew_class_monitor_local","text":"","code":"crew_class_monitor_local$dispatchers(user = ps::ps_username())"},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local monitor class — crew_class_monitor_local","text":"user Character length 1, user ID filter . NULL list processes users (recommended).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Local monitor class — crew_class_monitor_local","text":"Integer vector process IDs running mirai dispatcher processes.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"method-daemons-","dir":"Reference","previous_headings":"","what":"Method daemons()","title":"Local monitor class — crew_class_monitor_local","text":"List process IDs locally running mirai daemon processes crew workers. crew_async() object can launch processes: example, positive integer supplied processes argument e.g. crew.aws.batch::crew_controller_aws_batch().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Local monitor class — crew_class_monitor_local","text":"","code":"crew_class_monitor_local$daemons(user = ps::ps_username())"},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local monitor class — crew_class_monitor_local","text":"user Character length 1, user ID filter . NULL list processes users (recommended).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Local monitor class — crew_class_monitor_local","text":"Integer vector process IDs locally running mirai daemon processes crew workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"method-workers-","dir":"Reference","previous_headings":"","what":"Method workers()","title":"Local monitor class — crew_class_monitor_local","text":"List process IDs locally running crew workers launched local controller (crew_controller_local()).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Local monitor class — crew_class_monitor_local","text":"","code":"crew_class_monitor_local$workers(user = ps::ps_username())"},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local monitor class — crew_class_monitor_local","text":"user Character length 1, user ID filter . NULL list processes users (recommended).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Local monitor class — crew_class_monitor_local","text":"workers running local computer listed. Workers listed include jobs job schedulers like SLURM jobs cloud services like AWS Batch. monitor worker processes, please consult monitor objects relevant third-party launcher plugins crew.cluster crew.aws.batch.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Local monitor class — crew_class_monitor_local","text":"Integer vector process IDs locally running crew workers launched local controller (crew_controller_local()).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"Local monitor class — crew_class_monitor_local","text":"Terminate given process IDs.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Local monitor class — crew_class_monitor_local","text":"","code":"crew_class_monitor_local$terminate(pids)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local monitor class — crew_class_monitor_local","text":"pids Integer vector process IDs local processes terminate.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Local monitor class — crew_class_monitor_local","text":"Termination happens operating system signal given crew_terminate_signal().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_monitor_local.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Local monitor class — crew_class_monitor_local","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 relay class. — crew_class_relay","title":"R6 relay class. — crew_class_relay","text":"R6 class relay configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 relay class. — crew_class_relay","text":"See crew_relay().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 relay class. — crew_class_relay","text":"condition Main condition variable. Condition variable relay . Condition variable relay .","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 relay class. — crew_class_relay","text":"crew_class_relay$validate() crew_class_relay$start() crew_class_relay$terminate() crew_class_relay$set_from() crew_class_relay$set_to() crew_class_relay$wait()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"R6 relay class. — crew_class_relay","text":"Validate object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"R6 relay class. — crew_class_relay","text":"Start relay object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$start()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-terminate-","dir":"Reference","previous_headings":"","what":"Method terminate()","title":"R6 relay class. — crew_class_relay","text":"Terminate relay object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$terminate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-set-from-","dir":"Reference","previous_headings":"","what":"Method set_from()","title":"R6 relay class. — crew_class_relay","text":"Set condition variable relay .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$set_from(from)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 relay class. — crew_class_relay","text":"Condition variable relay .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-set-to-","dir":"Reference","previous_headings":"","what":"Method set_to()","title":"R6 relay class. — crew_class_relay","text":"Set condition variable relay .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$set_to(to)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 relay class. — crew_class_relay","text":"Condition variable relay .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"method-wait-","dir":"Reference","previous_headings":"","what":"Method wait()","title":"R6 relay class. — crew_class_relay","text":"Wait unobserved task resolves timeout reached.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_class_relay$wait(seconds_timeout = 1000)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 relay class. — crew_class_relay","text":"seconds_timeout Positive numeric length 1, Number seconds wait timing .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 relay class. — crew_class_relay","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_relay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 relay class. — crew_class_relay","text":"","code":"crew_relay() #> <crew_class_relay> #>   Public: #>     condition: active binding #>     from: active binding #>     set_from: function (from)  #>     set_to: function (to)  #>     start: function ()  #>     terminate: function ()  #>     to: active binding #>     validate: function ()  #>     wait: function (seconds_timeout = 1000)  #>   Private: #>     .condition: NULL #>     .from: NULL #>     .to: NULL"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 throttle class. — crew_class_throttle","title":"R6 throttle class. — crew_class_throttle","text":"R6 class throttle configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 throttle class. — crew_class_throttle","text":"See crew_throttle().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 throttle class. — crew_class_throttle","text":"seconds_interval Positive numeric length 1, throttling interval seconds. polled Positive numeric length 1, millisecond timestamp last time poll() returned TRUE. NULL poll() never called current object.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 throttle class. — crew_class_throttle","text":"crew_class_throttle$new() crew_class_throttle$validate() crew_class_throttle$poll() crew_class_throttle$reset()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 throttle class. — crew_class_throttle","text":"Throttle constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 throttle class. — crew_class_throttle","text":"","code":"crew_class_throttle$new(seconds_interval = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 throttle class. — crew_class_throttle","text":"seconds_interval Throttling interval seconds.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 throttle class. — crew_class_throttle","text":"R6 object throttle configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 throttle class. — crew_class_throttle","text":"","code":"throttle <- crew_throttle(seconds_interval = 0.5) throttle$poll() throttle$poll()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"R6 throttle class. — crew_class_throttle","text":"Validate object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 throttle class. — crew_class_throttle","text":"","code":"crew_class_throttle$validate()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 throttle class. — crew_class_throttle","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"method-poll-","dir":"Reference","previous_headings":"","what":"Method poll()","title":"R6 throttle class. — crew_class_throttle","text":"Poll throttler.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 throttle class. — crew_class_throttle","text":"","code":"crew_class_throttle$poll()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 throttle class. — crew_class_throttle","text":"TRUE poll() return TRUE last seconds_interval seconds, FALSE otherwise.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"R6 throttle class. — crew_class_throttle","text":"Reset throttle object next poll() returns TRUE.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 throttle class. — crew_class_throttle","text":"","code":"crew_class_throttle$reset()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 throttle class. — crew_class_throttle","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_throttle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 throttle class. — crew_class_throttle","text":"","code":"throttle <- crew_throttle(seconds_interval = 0.5) throttle$poll() #> [1] TRUE throttle$poll() #> [1] FALSE  ## ------------------------------------------------ ## Method `crew_class_throttle$new` ## ------------------------------------------------  throttle <- crew_throttle(seconds_interval = 0.5) throttle$poll() #> [1] TRUE throttle$poll() #> [1] FALSE"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 TLS class. — crew_class_tls","title":"R6 TLS class. — crew_class_tls","text":"R6 class TLS configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 TLS class. — crew_class_tls","text":"See crew_tls().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 TLS class. — crew_class_tls","text":"mode See crew_tls(). key See crew_tls(). password See crew_tls(). certificates See crew_tls().","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 TLS class. — crew_class_tls","text":"crew_class_tls$new() crew_class_tls$validate() crew_class_tls$client() crew_class_tls$worker()","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 TLS class. — crew_class_tls","text":"TLS configuration constructor.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_class_tls$new(   mode = NULL,   key = NULL,   password = NULL,   certificates = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 TLS class. — crew_class_tls","text":"mode Argument passed crew_tls(). key Argument passed crew_tls(). password Argument passed crew_tls(). certificates Argument passed crew_tls().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 TLS class. — crew_class_tls","text":"R6 object TLS configuration.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_tls(mode = \"automatic\")"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"R6 TLS class. — crew_class_tls","text":"Validate object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_class_tls$validate(test = TRUE)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 TLS class. — crew_class_tls","text":"test Logical length 1, whether test TLS configuration nanonext::tls_config().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 TLS class. — crew_class_tls","text":"NULL (invisibly).","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"method-client-","dir":"Reference","previous_headings":"","what":"Method client()","title":"R6 TLS class. — crew_class_tls","text":"TLS credentials crew client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_class_tls$client()"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 TLS class. — crew_class_tls","text":"NULL character vector, depending mode.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"method-worker-","dir":"Reference","previous_headings":"","what":"Method worker()","title":"R6 TLS class. — crew_class_tls","text":"TLS credentials crew workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_class_tls$worker(name)"},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 TLS class. — crew_class_tls","text":"name Character length 1 mirai compute profile.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 TLS class. — crew_class_tls","text":"NULL character vector, depending mode.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_class_tls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 TLS class. — crew_class_tls","text":"","code":"crew_tls(mode = \"automatic\") #> <crew_class_tls> #>   Public: #>     certificates: active binding #>     client: function ()  #>     initialize: function (mode = NULL, key = NULL, password = NULL, certificates = NULL)  #>     key: active binding #>     mode: active binding #>     password: active binding #>     validate: function (test = TRUE)  #>     worker: function (name)  #>   Private: #>     .certificates: NULL #>     .key: NULL #>     .mode: automatic #>     .password: NULL #>     .read_certificates: function ()  #>     .read_files: function (files)  #>     .read_key: function ()  #>     .validate_mode_automatic: function ()  #>     .validate_mode_custom: function ()   ## ------------------------------------------------ ## Method `crew_class_tls$new` ## ------------------------------------------------  crew_tls(mode = \"automatic\") #> <crew_class_tls> #>   Public: #>     certificates: active binding #>     client: function ()  #>     initialize: function (mode = NULL, key = NULL, password = NULL, certificates = NULL)  #>     key: active binding #>     mode: active binding #>     password: active binding #>     validate: function (test = TRUE)  #>     worker: function (name)  #>   Private: #>     .certificates: NULL #>     .key: NULL #>     .mode: automatic #>     .password: NULL #>     .read_certificates: function ()  #>     .read_files: function (files)  #>     .read_key: function ()  #>     .validate_mode_automatic: function ()  #>     .validate_mode_custom: function ()"},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminate dispatchers and/or workers — crew_clean","title":"Terminate dispatchers and/or workers — crew_clean","text":"Terminate mirai dispatchers /crew workers may lingering previous workloads.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminate dispatchers and/or workers — crew_clean","text":"","code":"crew_clean(   dispatchers = TRUE,   workers = TRUE,   user = ps::ps_username(),   seconds_interval = 0.5,   seconds_timeout = 60,   verbose = TRUE )"},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminate dispatchers and/or workers — crew_clean","text":"dispatchers Logical length 1, whether terminate dispatchers. workers Logical length 1, whether terminate workers. user Character length 1. Terminate dispatchers /workers associated user name. seconds_interval Seconds polling intervals waiting process exit. seconds_timeout Seconds wait process exit. verbose Logical length 1, whether print informative message every time process terminated.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminate dispatchers and/or workers — crew_clean","text":"NULL (invisibly). verbose TRUE, print message every terminated process.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminate dispatchers and/or workers — crew_clean","text":"Behind scenes, mirai uses external R process called \"dispatcher\" send tasks crew workers. dispatcher usually shuts terminate controller quit R session, sometimes lingers. Likewise, sometimes crew workers shut . crew_clean() function searches process table local machine manually terminates mirai dispatchers crew workers associated user name (user name select user argument. Unfortunately, reach remote workers launched crew.cluster controller.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminate dispatchers and/or workers — crew_clean","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { crew_clean() }"},{"path":"https://wlandau.github.io/crew/reference/crew_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a client object. — crew_client","title":"Create a client object. — crew_client","text":"Create R6 wrapper object manage mirai client.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a client object. — crew_client","text":"","code":"crew_client(   name = NULL,   workers = 1L,   host = NULL,   port = NULL,   tls = crew::crew_tls(),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.5,   seconds_timeout = 5,   retry_tasks = TRUE,   log_resources = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a client object. — crew_client","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. log_resources Optional character string file path text file log memory consumption. Set log_resources NULL avoid writing log file. supply path, log() method write memory usage statistics file, controller methods throttling resource consumption recorded throughout whole life cycle controller. log file comma-separated values (CSV) format can easily read readr::read_csv(). controller automatically deletes old log file starts (controller$start() called first time, subsequent times). log file one row per observation process, including current R process (\"client\") mirai dispatcher. dispatcher included output, means dispatcher process running. Columns include: * type: type process (client dispatcher) * pid: process ID. * status: process status (ps::ps_status()). * rss: resident set size (RSS). RS total memory held process, including shared libraries may also use processes. RSS obtained ps::ps_memory_info() shown bytes. * elapsed: number elapsed seconds since R process started (proc.time()[\"elapsed\"]).","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a client object. — crew_client","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() client$summary() client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_controller.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a controller object from a client and launcher. — crew_controller","title":"Create a controller object from a client and launcher. — crew_controller","text":"function developers crew launcher plugins. Users use specific controller helper crew_controller_local().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_controller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a controller object from a client and launcher. — crew_controller","text":"","code":"crew_controller(client, launcher, auto_scale = NULL)"},{"path":"https://wlandau.github.io/crew/reference/crew_controller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a controller object from a client and launcher. — crew_controller","text":"client R6 client object created crew_client(). launcher R6 launcher object created one crew_launcher_*() functions crew_launcher_local(). auto_scale Deprecated. Use scale argument push(), pop(), wait() instead.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_controller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a controller object from a client and launcher. — crew_controller","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() launcher <- crew_launcher_local() controller <- crew_controller(client = client, launcher = launcher) controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop() controller$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_controller_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a controller group. — crew_controller_group","title":"Create a controller group. — crew_controller_group","text":"Create R6 object submit tasks launch workers multiple crew controllers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_controller_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a controller group. — crew_controller_group","text":"","code":"crew_controller_group(...)"},{"path":"https://wlandau.github.io/crew/reference/crew_controller_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a controller group. — crew_controller_group","text":"... R6 controller objects lists R6 controller objects. Nested lists allowed, element must control object another list.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_controller_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a controller group. — crew_controller_group","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { persistent <- crew_controller_local(name = \"persistent\") transient <- crew_controller_local(   name = \"transient\",   tasks_max = 1L ) group <- crew_controller_group(persistent, transient) group$start() group$push(name = \"task\", command = sqrt(4), controller = \"transient\") group$wait() group$pop() group$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_controller_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a controller with a local process launcher. — crew_controller_local","title":"Create a controller with a local process launcher. — crew_controller_local","text":"Create R6 object submit tasks launch workers local processes.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_controller_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a controller with a local process launcher. — crew_controller_local","text":"","code":"crew_controller_local(   name = NULL,   workers = 1L,   host = \"127.0.0.1\",   port = NULL,   tls = crew::crew_tls(),   tls_enable = NULL,   tls_config = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 30,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   retry_tasks = TRUE,   log_resources = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   r_arguments = c(\"--no-save\", \"--no-restore\"),   local_log_directory = NULL,   local_log_join = TRUE )"},{"path":"https://wlandau.github.io/crew/reference/crew_controller_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a controller with a local process launcher. — crew_controller_local","text":"name Name client object. NULL, name automatically generated. workers Integer, maximum number parallel workers run. host IP address mirai client send receive tasks. NULL, host defaults local IP address. port TCP port listen workers. NULL, available ephemeral port automatically chosen. tls TLS configuration object crew_tls(). tls_enable Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. tls_config Deprecated 2023-09-15 version 0.4.1. Use argument tls instead. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status() seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.5.0.9002. longer necessary. retry_tasks TRUE automatically retry task event unexpected worker exit. FALSE give first exit return mirai error code (code number 19). TRUE (default) recommended situations. Use FALSE debugging purposes, e.g. confirm task causing worker run memory crash way. log_resources Optional character string file path text file log memory consumption. Set log_resources NULL avoid writing log file. supply path, log() method write memory usage statistics file, controller methods throttling resource consumption recorded throughout whole life cycle controller. log file comma-separated values (CSV) format can easily read readr::read_csv(). controller automatically deletes old log file starts (controller$start() called first time, subsequent times). log file one row per observation process, including current R process (\"client\") mirai dispatcher. dispatcher included output, means dispatcher process running. Columns include: * type: type process (client dispatcher) * pid: process ID. * status: process status (ps::ps_status()). * rss: resident set size (RSS). RS total memory held process, including shared libraries may also use processes. RSS obtained ps::ps_memory_info() shown bytes. * elapsed: number elapsed seconds since R process started (proc.time()[\"elapsed\"]). tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). local_log_directory Either NULL character length 1 file path directory write worker-specific log files standard output standard error messages. log file represents single instance running worker, log files given worker starts terminates lot. Set NULL suppress log files (default). local_log_join Logical length 1. TRUE, crew write standard output standard error log file worker instance. FALSE, two streams go different log files informative suffixes.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_controller_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a controller with a local process launcher. — crew_controller_local","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { controller <- crew_controller_local() controller$start() controller$push(name = \"task\", command = sqrt(4)) controller$wait() controller$pop() controller$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_deprecate.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecate a crew feature. — crew_deprecate","title":"Deprecate a crew feature. — crew_deprecate","text":"Show informative warning crew feature deprecated.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_deprecate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecate a crew feature. — crew_deprecate","text":"","code":"crew_deprecate(   name,   date,   version,   alternative,   condition = \"warning\",   value = \"x\",   skip_cran = FALSE,   frequency = \"always\" )"},{"path":"https://wlandau.github.io/crew/reference/crew_deprecate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecate a crew feature. — crew_deprecate","text":"name Name feature (function argument) deprecate. date Date deprecation. version Package version deprecation instated. alternative Message alternative. condition Either \"warning\" \"message\" indicate type condition thrown deprecation. value Value object. Deprecation skipped value NULL. skip_cran Logical length 1, whether skip deprecation warning message CRAN. frequency Character length 1, passed .frequency argument rlang::warn().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_deprecate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecate a crew feature. — crew_deprecate","text":"NULL (invisibly). Throws warning feature deprecated.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_deprecate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecate a crew feature. — crew_deprecate","text":"","code":"suppressWarnings(   crew_deprecate(     name = \"auto_scale\",     date = \"2023-05-18\",     version = \"0.2.0\",     alternative = \"use the scale argument of push(), pop(), and wait().\"   ) )"},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an R command and return results as a monad. — crew_eval","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"user-side function. call directly.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"","code":"crew_eval(   command,   name = NA_character_,   string = NA_character_,   data = list(),   globals = list(),   seed = NULL,   algorithm = NULL,   packages = character(0),   library = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"command Language object R code run. name Character length 1, name task. string Character length 1, string representation command. data Named list local data objects evaluation environment. globals Named list objects temporarily assign global environment task. seed Integer length 1 pseudo-random number generator seed set evaluation task. Passed seed argument set.seed() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. algorithm Integer length 1 pseudo-random number generator algorithm set evaluation task. Passed kind argument RNGkind() NULL. algorithm seed NULL, random number generator defaults recommended widely spaced worker-specific L'Ecuyer streams supported mirai::nextstream(). See vignette(\"parallel\", package = \"parallel\") details. packages Character vector packages load task. library Library path load packages. See lib.loc argument require().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"monad object results metadata.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"crew_eval() function evaluates R expression encapsulated environment returns monad results, including warnings error messages applicable. random number generator seed, globals, global options restored original values exit.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an R command and return results as a monad. — crew_eval","text":"","code":"crew_eval(quote(1 + 1)) #> $name #> [1] NA #>  #> $command #> [1] NA #>  #> $result #> $result[[1]] #> [1] 2 #>  #>  #> $seconds #> [1] 0 #>  #> $seed #> [1] NA #>  #> $algorithm #> [1] NA #>  #> $status #> [1] \"success\" #>  #> $code #> [1] 0 #>  #> $error #> [1] NA #>  #> $trace #> [1] NA #>  #> $warnings #> [1] NA #>  #> $launcher #> [1] NA #>  #> $worker #> [1] NA #>  #> $instance #> [1] NA #>"},{"path":"https://wlandau.github.io/crew/reference/crew_eval_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an asynchronous task in the crew launcher. — crew_eval_async","title":"Run an asynchronous task in the crew launcher. — crew_eval_async","text":"Called internally, users.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_eval_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an asynchronous task in the crew launcher. — crew_eval_async","text":"","code":"crew_eval_async(   command,   data = list(),   packages = character(0L),   library = NULL )"},{"path":"https://wlandau.github.io/crew/reference/crew_eval_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an asynchronous task in the crew launcher. — crew_eval_async","text":"command Language object R code run. data Named list objects command depends . packages Character vector packages load. library Character vector library paths load packages .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_eval_async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an asynchronous task in the crew launcher. — crew_eval_async","text":"result running command.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_launcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an abstract launcher. — crew_launcher","title":"Create an abstract launcher. — crew_launcher","text":"function useful inheriting argument documentation functions create custom third-party launchers. See @inheritParams crew::crew_launcher source code file crew_launcher_local().","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_launcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an abstract launcher. — crew_launcher","text":"","code":"crew_launcher(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 30,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(),   processes = NULL,   r_arguments = c(\"--no-save\", \"--no-restore\") )"},{"path":"https://wlandau.github.io/crew/reference/crew_launcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an abstract launcher. — crew_launcher","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.5.0.9002. longer necessary. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). processes NULL positive integer length 1, number local processes launch allow worker launches happen asynchronously. NULL, local processes launched. 1 greater, launcher starts processes start() ends terminate(). Plugins may use processes run asynchronous calls using launcher$async$eval() expect mirai task object return value. r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\").","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_launcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an abstract launcher. — crew_launcher","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(sockets = client$summary()$socket) launcher$launch(index = 1L) task <- mirai::mirai(\"result\", .compute = client$name) mirai::call_mirai_(task) task$data client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_launcher_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a launcher with local process workers. — crew_launcher_local","title":"Create a launcher with local process workers. — crew_launcher_local","text":"Create R6 object launch maintain local process workers.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_launcher_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a launcher with local process workers. — crew_launcher_local","text":"","code":"crew_launcher_local(   name = NULL,   seconds_interval = 0.5,   seconds_timeout = 60,   seconds_launch = 30,   seconds_idle = Inf,   seconds_wall = Inf,   seconds_exit = NULL,   tasks_max = Inf,   tasks_timers = 0L,   reset_globals = TRUE,   reset_packages = FALSE,   reset_options = FALSE,   garbage_collection = FALSE,   launch_max = 5L,   tls = crew::crew_tls(),   r_arguments = c(\"--no-save\", \"--no-restore\"),   local_log_directory = NULL,   local_log_join = TRUE )"},{"path":"https://wlandau.github.io/crew/reference/crew_launcher_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a launcher with local process workers. — crew_launcher_local","text":"name Name launcher. seconds_interval Number seconds polling intervals waiting certain internal synchronous operations complete, checking mirai::status(). seconds_timeout Number seconds timing waiting certain synchronous operations complete, checking mirai::status(). seconds_launch Seconds startup time allow. worker unconditionally assumed alive moment launch seconds_launch seconds later. seconds_launch seconds, worker considered alive actively connected assign websocket. seconds_idle Maximum number seconds worker can idle since completion last task. exceeded, worker exits. timer launch tasks_timers tasks completed. See idletime argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, please allow enough idle time new worker delegated new task. seconds_wall Soft wall time seconds. timer launch tasks_timers tasks completed. See walltime argument mirai::daemon(). seconds_exit Deprecated 2023-09-21 version 0.5.0.9002. longer necessary. tasks_max Maximum number tasks worker exiting. See maxtasks argument mirai::daemon(). crew excel perfectly transient workers micromanage assignment tasks workers, recommended set tasks_max value greater 1. tasks_timers Number tasks activating timers seconds_idle seconds_wall. See timerstart argument mirai::daemon(). reset_globals TRUE reset global environment variables tasks, FALSE leave alone. reset_packages TRUE unload packages loaded task (runs task), FALSE leave packages alone. reset_options TRUE reset global options original state task, FALSE otherwise. recommended set reset_options = TRUE reset_packages also TRUE packages sometimes rely options set loading time. garbage_collection TRUE run garbage collection tasks, FALSE skip. launch_max Positive integer length 1, maximum allowed consecutive launch attempts complete tasks. Enforced worker--worker basis. futile launch count resets back 0 worker completes task. recommended set launch_max 0 sometimes workers unproductive perfectly ordinary circumstances. launch_max still small enough detect errors underlying platform. tls TLS configuration object crew_tls(). r_arguments Optional character vector command line arguments pass Rscript (non-Windows) Rscript.exe (Windows) starting worker. Example: r_arguments = c(\"--vanilla\", \"--max-connections=32\"). local_log_directory Either NULL character length 1 file path directory write worker-specific log files standard output standard error messages. log file represents single instance running worker, log files given worker starts terminates lot. Set NULL suppress log files (default). local_log_join Logical length 1. TRUE, crew write standard output standard error log file worker instance. FALSE, two streams go different log files informative suffixes.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_launcher_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a launcher with local process workers. — crew_launcher_local","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { client <- crew_client() client$start() launcher <- crew_launcher_local(name = client$name) launcher$start(sockets = client$summary()$socket) launcher$launch(index = 1L) task <- mirai::mirai(\"result\", .compute = client$name) mirai::call_mirai_(task) task$data client$terminate() }"},{"path":"https://wlandau.github.io/crew/reference/crew_monitor_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a local monitor object. — crew_monitor_local","title":"Create a local monitor object. — crew_monitor_local","text":"Create R6 object monitor local processes created crew mirai.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_monitor_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a local monitor object. — crew_monitor_local","text":"","code":"crew_monitor_local()"},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Random name — crew_random_name","title":"Random name — crew_random_name","text":"Generate random string can used name worker task.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random name — crew_random_name","text":"","code":"crew_random_name(n = 12L)"},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random name — crew_random_name","text":"n Number bytes information random string hashed generate name. Larger n likely generate unique names, may slower compute.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random name — crew_random_name","text":"random character string.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random name — crew_random_name","text":"randomness reproducible set e.g. set.seed() R.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_random_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random name — crew_random_name","text":"","code":"crew_random_name() #> [1] \"740615eeea147625bb6514d2\""},{"path":"https://wlandau.github.io/crew/reference/crew_relay.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a crew relay object. — crew_relay","title":"Create a crew relay object. — crew_relay","text":"Create R6 crew relay object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_relay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a crew relay object. — crew_relay","text":"","code":"crew_relay()"},{"path":"https://wlandau.github.io/crew/reference/crew_relay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a crew relay object. — crew_relay","text":"R6 crew relay object.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_relay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a crew relay object. — crew_relay","text":"crew relay object keeps signaling relationships among condition variables.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_relay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a crew relay object. — crew_relay","text":"","code":"crew_relay() #> <crew_class_relay> #>   Public: #>     condition: active binding #>     from: active binding #>     set_from: function (from)  #>     set_to: function (to)  #>     start: function ()  #>     terminate: function ()  #>     to: active binding #>     validate: function ()  #>     wait: function (seconds_timeout = 1000)  #>   Private: #>     .condition: NULL #>     .from: NULL #>     .to: NULL"},{"path":"https://wlandau.github.io/crew/reference/crew_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry code. — crew_retry","title":"Retry code. — crew_retry","text":"Repeatedly retry function keeps returning FALSE exit loop returns TRUE","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry code. — crew_retry","text":"","code":"crew_retry(   fun,   args = list(),   seconds_interval = 1,   seconds_timeout = 60,   max_tries = Inf,   error = TRUE,   message = character(0),   envir = parent.frame() )"},{"path":"https://wlandau.github.io/crew/reference/crew_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry code. — crew_retry","text":"fun Function returns FALSE keep waiting TRUE stop waiting. args named list arguments fun. seconds_interval Nonnegative numeric length 1, number seconds wait calls fun. seconds_timeout Nonnegative numeric length 1, number seconds loop timing . max_tries Maximum number calls fun try giving . error Whether throw error timeout max tries. message Character length 1, optional error message wait times . envir Environment evaluate fun.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry code. — crew_retry","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retry code. — crew_retry","text":"","code":"crew_retry(fun = function() TRUE)"},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually terminate a local process. — crew_terminate_process","title":"Manually terminate a local process. — crew_terminate_process","text":"Manually terminate local process.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually terminate a local process. — crew_terminate_process","text":"","code":"crew_terminate_process(pid)"},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually terminate a local process. — crew_terminate_process","text":"pid Integer length 1, process ID terminate.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually terminate a local process. — crew_terminate_process","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually terminate a local process. — crew_terminate_process","text":"","code":"if (identical(Sys.getenv(\"CREW_EXAMPLES\"), \"true\")) { process <- processx::process$new(\"sleep\", \"60\") process$is_alive() crew_terminate_process(pid = process$get_pid()) process$is_alive() }"},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the termination signal. — crew_terminate_signal","title":"Get the termination signal. — crew_terminate_signal","text":"Get supported operating system signal terminating local process.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the termination signal. — crew_terminate_signal","text":"","code":"crew_terminate_signal()"},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the termination signal. — crew_terminate_signal","text":"integer length 1: tools::SIGTERM platform supports SIGTERM. , crew_crew_terminate_signal()() checks SIGQUIT, SIGINT, SIGKILL, returns first signal finds operating system can use.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_terminate_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the termination signal. — crew_terminate_signal","text":"","code":"crew_terminate_signal() #> [1] 15"},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a stateful throttling object. — crew_throttle","title":"Create a stateful throttling object. — crew_throttle","text":"Create R6 object throttling.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a stateful throttling object. — crew_throttle","text":"","code":"crew_throttle(seconds_interval = 0.5)"},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a stateful throttling object. — crew_throttle","text":"seconds_interval Positive numeric length 1, throttling interval. poll() method returns TRUE called last seconds_interval seconds.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a stateful throttling object. — crew_throttle","text":"R6 object throttle configuration settings methods.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a stateful throttling object. — crew_throttle","text":"Throttling technique limits often function called given period time. crew_throttle() objects support throttle argument controller methods, ensures auto-scaling happen every seconds_interval seconds. helps avoid overburdening mirai dispatcher resources.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_throttle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a stateful throttling object. — crew_throttle","text":"","code":"throttle <- crew_throttle(seconds_interval = 0.5) throttle$poll() #> [1] TRUE throttle$poll() #> [1] FALSE"},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure TLS. — crew_tls","title":"Configure TLS. — crew_tls","text":"Create R6 object transport layer security (TLS) configuration crew.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure TLS. — crew_tls","text":"","code":"crew_tls(   mode = \"none\",   key = NULL,   password = NULL,   certificates = NULL,   validate = TRUE )"},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure TLS. — crew_tls","text":"mode Character length 1. Must one following: \"none\": disable TLS configuration. \"automatic\": let mirai create one-time key pair self-signed certificate. \"custom\": manually supply private key pair, optional password private key, certificate, optional revocation list. key mode \"none\" \"automatic\", key NULL. mode \"custom\", key character length 1 file path private key file. password mode \"none\" \"automatic\", password NULL. mode \"custom\" private key encrypted, password still NULL. mode \"custom\" private key encrypted, password character length 1 password private key. case, SAVE PASSWORD R CODE FILES. See keyring R package solutions. certificates mode \"none\" \"automatic\", certificates NULL. mode \"custom\", certificates character vector file paths certificate files (signed public keys). certificate self-signed directly signed certificate authority (CA), certificate CA needed. whole certificate chain begins certificate ends CA, can supply whole certificate chain character vector begins certificate ends certificate CA. validate Logical length 1, whether validate configuration object creation. FALSE, validate() can called later .","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure TLS. — crew_tls","text":"R6 object TLS configuration settings methods.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure TLS. — crew_tls","text":"crew_tls() objects input tls argument crew_client(), crew_controller_local(), etc. See https://wlandau.github.io/crew/articles/risks.html details.","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/crew_tls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure TLS. — crew_tls","text":"","code":"crew_tls(mode = \"automatic\") #> <crew_class_tls> #>   Public: #>     certificates: active binding #>     client: function ()  #>     initialize: function (mode = NULL, key = NULL, password = NULL, certificates = NULL)  #>     key: active binding #>     mode: active binding #>     password: active binding #>     validate: function (test = TRUE)  #>     worker: function (name)  #>   Private: #>     .certificates: NULL #>     .key: NULL #>     .mode: automatic #>     .password: NULL #>     .read_certificates: function ()  #>     .read_files: function (files)  #>     .read_key: function ()  #>     .validate_mode_automatic: function ()  #>     .validate_mode_custom: function ()"},{"path":"https://wlandau.github.io/crew/reference/crew_worker.html","id":null,"dir":"Reference","previous_headings":"","what":"Crew worker. — crew_worker","title":"Crew worker. — crew_worker","text":"Launches crew worker runs mirai daemon. user-side function. Users call crew_worker() directly. See launcher plugins like crew_launcher_local() examples.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_worker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crew worker. — crew_worker","text":"","code":"crew_worker(settings, launcher, worker, instance)"},{"path":"https://wlandau.github.io/crew/reference/crew_worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crew worker. — crew_worker","text":"settings Named list arguments mirai::daemon(). launcher Character length 1, name launcher. worker Positive integer length 1, index worker. worker index remains even current instance worker exits new instance launches. instance Character length 1 uniquely identify current instance worker.","code":""},{"path":"https://wlandau.github.io/crew/reference/crew_worker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crew worker. — crew_worker","text":"NULL (invisibly)","code":""},{"path":[]},{"path":"https://wlandau.github.io/crew/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-0959011-development","dir":"Changelog","previous_headings":"","what":"crew 0.9.5.9011 (development)","title":"crew 0.9.5.9011 (development)","text":"Give full worker name worker launch error message (@multimeric). Start controller automatically methods. Add r_arguments argument supply command line arguments R workers (#175, @rpruim). Add cancel() controller method cancel one tasks. Call cancel(= TRUE) terminate() safeguard. Make client$dispatcher ps::ps_handle() handle add new client$client handle current process. Add resources() method client track memory usage. Client log() method log memory consumption CSV file. passively log memory usage log_resources given, controller now calls log() side effect controller methods, throttling preserve speed. Return status status code pop() etc. New internal function as_monad() makes error reporting consistent. Use path.expand() local log files. Switch Rscript. Print session info crew_worker() attempting dial mirai. Add asyncdial = FALSE back mirai::daemon() call.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-095","dir":"Changelog","previous_headings":"","what":"crew 0.9.5","title":"crew 0.9.5","text":"CRAN release: 2024-06-24 CRAN patch.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-094","dir":"Changelog","previous_headings":"","what":"crew 0.9.4","title":"crew 0.9.4","text":"CRAN release: 2024-06-20 use extended tasks Shiny vignette. Add new retry_tasks argument default TRUE (#170). Avoid Base64 encoding functions nanonext","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-093","dir":"Changelog","previous_headings":"","what":"crew 0.9.3","title":"crew 0.9.3","text":"CRAN release: 2024-05-22 Deprecate native crew promises favor native event-driven promises mirai (#162). Update shiny.Rmd promises.Rmd vignette recommend native event-driven mirai promises (#162).","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-092","dir":"Changelog","previous_headings":"","what":"crew 0.9.2","title":"crew 0.9.2","text":"CRAN release: 2024-04-24 Use .args rather ... mirai::mirai() make sure arguments continue passed local variables mirai >= 0.13.1.9012. Add new controller methods autoscale(), descale(), started() facilitate different kinds Shiny apps. Deprecate scale throttle methods controller$promise(). promise() now always calls autoscale() make sure one one auto-scaling loop running asynchronously. Auto-scaling thus continues even promise resolves. Add second example vignette simulates coin flips. Add new error argument collect() (#166).","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-091","dir":"Changelog","previous_headings":"","what":"crew 0.9.1","title":"crew 0.9.1","text":"CRAN release: 2024-03-25 Rewrite async Shiny vignette crew promises Shiny extended tasks (#157, @jcheng5). Clarify intent controller$promise(mode = \"one\") vignette promises (@jcheng5). Implement error argument pop() may help integration ExtendedTask (@jcheng5). Handle task errors Shiny vignette (@jcheng5).","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-090","dir":"Changelog","previous_headings":"","what":"crew 0.9.0","title":"crew 0.9.0","text":"CRAN release: 2024-02-08 Require nanonext >= 0.12.0 mirai >= 0.12.0. Return always re-launching backlogged inactive workers (#79, https://github.com/shikokuchuo/mirai/discussions/95). Implement push_backlog() pop_backlog() manage cases desirable push saturated controllers (https://github.com/ropensci/targets/issues/1220). Invisibly return mirai object task pushed controller. allows users interact task directly, e.g. create promise object promises::.promise() (#146, @jcheng5). Add new walk() method controllers controller groups submit tasks batch return control immediately without waiting task complete (#148, @jcheng5). Revive collect() method popping multiple tasks (#148, @jcheng5). Add controller group methods nonempty(), resolved(), unresolved(), unpopped() help #148. Make mirai dispatcher error message extremely verbose.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-080","dir":"Changelog","previous_headings":"","what":"crew 0.8.0","title":"crew 0.8.0","text":"CRAN release: 2024-01-09 Configure workers send termination signal connection dispatcher broken (#141, @psychelzh). Huge thanks @shikokuchuo support https://github.com/shikokuchuo/mirai/issues/87, https://github.com/shikokuchuo/mirai/pull/88, https://github.com/shikokuchuo/nanonext/pull/25! signal platform-dependent determined new function crew_terminate_signal(). Implement crew_monitor_local() help users monitor terminate local R processes created crew mirai. Implement new utility function crew_terminate_process() terminate process manually without resorting SIGKILL Windows. Throw warning controller$map() least one task threw one. warnings = FALSE suppresses behavior. Set output = TRUE daemon() stdout stderr streams print. Add new arguments local_log_directory local_log_join write local log files.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-070","dir":"Changelog","previous_headings":"","what":"crew 0.7.0","title":"crew 0.7.0","text":"CRAN release: 2023-12-11 Migrate asyncdial autoexit. Use Sys.info()[[\"user\"]] get user crew_clean() (#135, @luwidmer). Use condition variables wait tasks efficiently (#108). #108, controller$map() can longer used tasks waiting popped. Use cli progress bar map(). Encapsulate non-function R6 members private list add active bindings interfaces necessary (#137). Ad hoc tests absolutely need modify private objects can use object$.__enclos_env__$private trick, tests skipped CRAN case change R6 breaks . Drop .signal mirai::mirai() since mirai tasks signal mirai version 0.11.2.9025. Implement crew_throttle(), decoupled mechanism throttling can applied scaling. Bring back throttle argument, powered crew_throttle(). Retry mirai::status() daemons_info() make configurable using seconds_interval seconds_timeout client launcher (#128).","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-060","dir":"Changelog","previous_headings":"","what":"crew 0.6.0","title":"crew 0.6.0","text":"CRAN release: 2023-10-12 Migrate checks enforce features version 0.5.0 reverse dependencies. Drop check backlogged workers, c.f. https://github.com/shikokuchuo/mirai/discussions/63#discussioncomment-7051889 (#79, #124, @shikokuchuo). Deprecate seconds_exit exitlinger mirai now obsolete (#125, @shikokuchuo). Use mirai::nextget(\"cv\") count unresolved tasks instead looping task objects (#131). Remove throttling collect() auto-scaling. Simplifies much code. Made possible efficiency gains #131. Simplify wait(). seconds_interval map() longer defaults controller$client$seconds_interval. launcher$terminate_workers() terminates one workers, launcher$terminate terminates whole launcher. Add infrastructure let custom launcher plugins launch terminate workers asynchronously (#133). Launchers can set positive number processes field set number local mirai daemons asynchronous requests launch terminate serious workers. , launch_worker() terminate_worker() can optionally make use launcher$async$eval() send asynchronous calls.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-050","dir":"Changelog","previous_headings":"","what":"crew 0.5.0","title":"crew 0.5.0","text":"CRAN release: 2023-09-18 Suppress interactive browser Windows launched worker previously (@psychelzh). Migrate new host/daemon nomenclature mirai 0.9.1 (#96). Suppress status() retries (@shikokuchuo, #100). Implement launch_max error workers repeatedly launch without completing tasks (#101, @shikokuchuo, @multimeric). Detect discovered workers robustly launcher$done(). Add new algorithm argument push(), shove(), map() methods controllers controller groups, well arguments/fields crew_eval() return value (#113, @shikokuchuo). default pseudo-random number generation, leverage widely-spaced L’Ecuyer streams supported mirai::nextstream() (#115, @shikokuchuo). Move README documentation vignettes. Add new crew_tls() function TLS configuration (#120). Deprecate tls_enable tls_config arguments crew_client() etc. favor tls argument accepts crew_tls() objects (#120).","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-040","dir":"Changelog","previous_headings":"","what":"crew 0.4.0","title":"crew 0.4.0","text":"CRAN release: 2023-07-10","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"highlights-0-4-0","dir":"Changelog","previous_headings":"","what":"Highlights","title":"crew 0.4.0","text":"Use TLS capabilities nanonext mirai. Add map() method controller class functional programming (#93). Fix bug scale() launched many workers active - demand less 0. Add crew_clean() help clean lingering dispatchers workers previous sessions.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"other-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"crew 0.4.0","text":"Remove temporary controller summary workaround ensured CRAN compatibility targets 1.1.3. Add guardrails make sure controller started methods require . Part involved improving error messages. Retry daemons() daemons_info().","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-030","dir":"Changelog","previous_headings":"","what":"crew 0.3.0","title":"crew 0.3.0","text":"CRAN release: 2023-06-26 Track warnings properly (#81, @brendanf). Optimize heavily (#81, #83, @shikokuchuo, @brendanf). Use CRAN nanonext 0.9.0. Delegate task pushing collection logic new R6 schedule class (#84). Delegate auto-scaling launcher (#84). Drastically simplify internal logic (#84). Rename “router” “client” change function signature launch_worker() (#84). Unfortunately neither changes back-compatible third-party launcher plugins. However, controller interface still back-compatible, targets remains unaffected. Terminate “lost” workers websocket rotation. Allow NULL result pop()$result[[1L]]. Delegate summaries among controller, schedule, launcher, client. Default loopback address local controller. Use already cumulative assigned complete stats mirai 0.8.7.9029. Reorganize pkgdown reference Rd families clarify parts end-users parts launcher plugin developers. Add controller$shove() schedule$list() support fast extensions functional programming. Depend mirai 0.9.0 greater.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-021","dir":"Changelog","previous_headings":"","what":"crew 0.2.1","title":"crew 0.2.1","text":"CRAN release: 2023-05-22 Use packageStartupMessage().","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-020","dir":"Changelog","previous_headings":"","what":"crew 0.2.0","title":"crew 0.2.0","text":"Use .args instead ... mirai::mirai(). Use set.seed() instead withr::local_seed() (#67, @shikokuchuo). Add vignette showcase integration Shiny, co-authored @dwoodie helpful suggestions @shikokuchuo. Drop rlang::duplicate() (#72, @shikokuchuo). poll dispatcher availability starting router objects (@shikokuchuo). Implement saturated() controller method support targets. Add worker_index column controller summaries. relaunching workers, prioritize unresolved tasks stuck NNG level (#75, @shikokuchuo). Always relaunch backlogged inactive workers (#79). Deprecate auto_scale argument/field controllers favor scale argument push(), pop(), wait(). Throttle auto-scaling interval self$router$seconds_interval (#76). Remove clean() instead terminate lost workers launch. Fix examples. Add collect argument pop().","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-011","dir":"Changelog","previous_headings":"","what":"crew 0.1.1","title":"crew 0.1.1","text":"CRAN release: 2023-04-21 Ensure checks pass CRAN.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-010","dir":"Changelog","previous_headings":"","what":"crew 0.1.0","title":"crew 0.1.0","text":"CRAN release: 2023-04-19 Remove asyncdial call mirai::daemons(). Explain vision launcher plugin vignette. Remove superfluous clean() controller method. Clean logic scale() launch() controller methods. Add new inactive() launcher method help . Eliminate superfluous worker launches: clean controller logic, check worker discoveries worker connections (#51). Simplify launcher plugin interface (#54). Commit using fast nanonext::.unresolved() (#49). Rename callr launcher local process launcher (#56). Switch SHA224 SHA1 hash random tokens names (#59, @shikokuchuo). Open confirm bus socket listeners asynchronously launcher abstract class (#58). Use condition variables test connection status worker instances (#57, @shikokuchuo). Allow dispatcher process exist router keep working mirai implements dispatcher another way (#60). Add substitute argument push() (#63). Remove dependency custom NNG bus sockets, significantly simplifies internals, improves robustness, smooths integration mirai (#61). Use processx instead callr local process launcher (#64”). Speed crew_eval() e.g. relying nanonext::mclock() time. Add empty() method check controller controller group empty. Rely mirai globals cleanup, garbage collection, global option resets (#65). Expose package unloading capabilities mirai (#65). Make monads classed environments leave tibbles last minute pop(). Rename crew_wait() crew_retry(). Export crew_assert() crew_random_name() help launcher plugins. Rename listen() method start() router class. poll() method now retries mirai::daemons() robustness. crew_retry() gains max_tries argument. Bug fix: stop setting router$daemons NULL poll() connection momentary problem. Simplify listening().","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-005","dir":"Changelog","previous_headings":"","what":"crew 0.0.5","title":"crew 0.0.5","text":"CRAN release: 2023-03-23 Write call() method make easier write custom launcher plugins. Add robust documentation tests custom launcher plugins. Use .character() make sure list argument supplied rm() safe. Fixes test failing R-devel crew version 0.0.4. Remove seconds_poll_high seconds_poll_low fields arguments compatibility mirai development release versions. Hard-code async_dial field router compatibility mirai development release versions.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-004","dir":"Changelog","previous_headings":"","what":"crew 0.0.4","title":"crew 0.0.4","text":"CRAN release: 2023-03-21 Adjust references tests requested CRAN.","code":""},{"path":"https://wlandau.github.io/crew/news/index.html","id":"crew-003","dir":"Changelog","previous_headings":"","what":"crew 0.0.3","title":"crew 0.0.3","text":"First version.","code":""}]
